/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// DatatankPart struct for DatatankPart
type DatatankPart struct {
	// The time of creation in ISO 8601 UTC.
	CreatedAt string `json:"created_at"`
	CreatedBy *User  `json:"created_by,omitempty"`
	// The ID of the user that created this.
	CreatedById     string         `json:"created_by_id"`
	DatatankTable   *DatatankTable `json:"datatank_table,omitempty"`
	DatatankTableId string         `json:"datatank_table_id"`
	// The time the item was deleted in ISO 8601 UTC.
	DeletedAt *string `json:"deleted_at,omitempty"`
	DeletedBy *User   `json:"deleted_by,omitempty"`
	// The ID of the user that performed the deletion.
	DeletedById                            string            `json:"deleted_by_id"`
	DesiredState                           string            `json:"desired_state"`
	Frequency                              PipelineFrequency `json:"frequency"`
	FreshnessState                         string            `json:"freshness_state"`
	Id                                     string            `json:"id"`
	LastErrorAt                            *string           `json:"last_error_at,omitempty"`
	LastErrorProcess                       *SpProcess        `json:"last_error_process,omitempty"`
	LastErrorProcessId                     *string           `json:"last_error_process_id,omitempty"`
	LastSuccessfulUpdateAt                 *string           `json:"last_successful_update_at,omitempty"`
	LastSuccessfulUpdateProcess            *SpProcess        `json:"last_successful_update_process,omitempty"`
	LastSuccessfulUpdateProcessId          *string           `json:"last_successful_update_process_id,omitempty"`
	LastUpdateAttemptAt                    *string           `json:"last_update_attempt_at,omitempty"`
	LastUpdateAttemptProcess               *SpProcess        `json:"last_update_attempt_process,omitempty"`
	LastUpdateAttemptProcessId             *string           `json:"last_update_attempt_process_id,omitempty"`
	MigratingFreshnessState                *string           `json:"migrating_freshness_state,omitempty"`
	MigratingLastErrorAt                   *string           `json:"migrating_last_error_at,omitempty"`
	MigratingLastErrorProcessId            *string           `json:"migrating_last_error_process_id,omitempty"`
	MigratingLastSuccessfulUpdateAt        *string           `json:"migrating_last_successful_update_at,omitempty"`
	MigratingLastSuccessfulUpdateProcess   *SpProcess        `json:"migrating_last_successful_update_process,omitempty"`
	MigratingLastSuccessfulUpdateProcessId *string           `json:"migrating_last_successful_update_process_id,omitempty"`
	MigratingLastUpdateAttemptAt           *string           `json:"migrating_last_update_attempt_at,omitempty"`
	MigratingLastUpdateAttemptProcess      *SpProcess        `json:"migrating_last_update_attempt_process,omitempty"`
	MigratingLastUpdateAttemptProcessId    *string           `json:"migrating_last_update_attempt_process_id,omitempty"`
	PartitionCandidate                     *string           `json:"partition_candidate,omitempty"`
	PartitionCurrent                       string            `json:"partition_current"`
	Pipeline                               *Pipeline         `json:"pipeline,omitempty"`
	PipelineId                             string            `json:"pipeline_id"`
	SourceConnection                       *WorkspaceSchema  `json:"source_connection,omitempty"`
	SourceConnectionId                     *string           `json:"source_connection_id,omitempty"`
	State                                  string            `json:"state"`
	StateReason                            *string           `json:"state_reason,omitempty"`
	// The time of the last update in ISO 8601 UTC.
	UpdatedAt *string `json:"updated_at,omitempty"`
	UpdatedBy *User   `json:"updated_by,omitempty"`
	// The ID of the user that performed the last update.
	UpdatedById string `json:"updated_by_id"`
	// The version ID of this item. Pass this version ID via an If-Match header when performing mutation operations on the item.
	VersionId int32 `json:"version_id"`
}

// NewDatatankPart instantiates a new DatatankPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatatankPart(createdAt string, createdById string, datatankTableId string, deletedById string, desiredState string, frequency PipelineFrequency, freshnessState string, id string, partitionCurrent string, pipelineId string, state string, updatedById string, versionId int32) *DatatankPart {
	this := DatatankPart{}
	this.CreatedAt = createdAt
	this.CreatedById = createdById
	this.DatatankTableId = datatankTableId
	this.DeletedById = deletedById
	this.DesiredState = desiredState
	this.Frequency = frequency
	this.FreshnessState = freshnessState
	this.Id = id
	this.PartitionCurrent = partitionCurrent
	this.PipelineId = pipelineId
	this.State = state
	this.UpdatedById = updatedById
	this.VersionId = versionId
	return &this
}

// NewDatatankPartWithDefaults instantiates a new DatatankPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatatankPartWithDefaults() *DatatankPart {
	this := DatatankPart{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *DatatankPart) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DatatankPart) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DatatankPart) GetCreatedBy() User {
	if o == nil || o.CreatedBy == nil {
		var ret User
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetCreatedByOk() (*User, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DatatankPart) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given User and assigns it to the CreatedBy field.
func (o *DatatankPart) SetCreatedBy(v User) {
	o.CreatedBy = &v
}

// GetCreatedById returns the CreatedById field value
func (o *DatatankPart) GetCreatedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetCreatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedById, true
}

// SetCreatedById sets field value
func (o *DatatankPart) SetCreatedById(v string) {
	o.CreatedById = v
}

// GetDatatankTable returns the DatatankTable field value if set, zero value otherwise.
func (o *DatatankPart) GetDatatankTable() DatatankTable {
	if o == nil || o.DatatankTable == nil {
		var ret DatatankTable
		return ret
	}
	return *o.DatatankTable
}

// GetDatatankTableOk returns a tuple with the DatatankTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetDatatankTableOk() (*DatatankTable, bool) {
	if o == nil || o.DatatankTable == nil {
		return nil, false
	}
	return o.DatatankTable, true
}

// HasDatatankTable returns a boolean if a field has been set.
func (o *DatatankPart) HasDatatankTable() bool {
	if o != nil && o.DatatankTable != nil {
		return true
	}

	return false
}

// SetDatatankTable gets a reference to the given DatatankTable and assigns it to the DatatankTable field.
func (o *DatatankPart) SetDatatankTable(v DatatankTable) {
	o.DatatankTable = &v
}

// GetDatatankTableId returns the DatatankTableId field value
func (o *DatatankPart) GetDatatankTableId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatatankTableId
}

// GetDatatankTableIdOk returns a tuple with the DatatankTableId field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetDatatankTableIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatatankTableId, true
}

// SetDatatankTableId sets field value
func (o *DatatankPart) SetDatatankTableId(v string) {
	o.DatatankTableId = v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *DatatankPart) GetDeletedAt() string {
	if o == nil || o.DeletedAt == nil {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetDeletedAtOk() (*string, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *DatatankPart) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *DatatankPart) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *DatatankPart) GetDeletedBy() User {
	if o == nil || o.DeletedBy == nil {
		var ret User
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetDeletedByOk() (*User, bool) {
	if o == nil || o.DeletedBy == nil {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *DatatankPart) HasDeletedBy() bool {
	if o != nil && o.DeletedBy != nil {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given User and assigns it to the DeletedBy field.
func (o *DatatankPart) SetDeletedBy(v User) {
	o.DeletedBy = &v
}

// GetDeletedById returns the DeletedById field value
func (o *DatatankPart) GetDeletedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeletedById
}

// GetDeletedByIdOk returns a tuple with the DeletedById field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetDeletedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeletedById, true
}

// SetDeletedById sets field value
func (o *DatatankPart) SetDeletedById(v string) {
	o.DeletedById = v
}

// GetDesiredState returns the DesiredState field value
func (o *DatatankPart) GetDesiredState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DesiredState
}

// GetDesiredStateOk returns a tuple with the DesiredState field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetDesiredStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DesiredState, true
}

// SetDesiredState sets field value
func (o *DatatankPart) SetDesiredState(v string) {
	o.DesiredState = v
}

// GetFrequency returns the Frequency field value
func (o *DatatankPart) GetFrequency() PipelineFrequency {
	if o == nil {
		var ret PipelineFrequency
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetFrequencyOk() (*PipelineFrequency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *DatatankPart) SetFrequency(v PipelineFrequency) {
	o.Frequency = v
}

// GetFreshnessState returns the FreshnessState field value
func (o *DatatankPart) GetFreshnessState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FreshnessState
}

// GetFreshnessStateOk returns a tuple with the FreshnessState field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetFreshnessStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FreshnessState, true
}

// SetFreshnessState sets field value
func (o *DatatankPart) SetFreshnessState(v string) {
	o.FreshnessState = v
}

// GetId returns the Id field value
func (o *DatatankPart) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DatatankPart) SetId(v string) {
	o.Id = v
}

// GetLastErrorAt returns the LastErrorAt field value if set, zero value otherwise.
func (o *DatatankPart) GetLastErrorAt() string {
	if o == nil || o.LastErrorAt == nil {
		var ret string
		return ret
	}
	return *o.LastErrorAt
}

// GetLastErrorAtOk returns a tuple with the LastErrorAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetLastErrorAtOk() (*string, bool) {
	if o == nil || o.LastErrorAt == nil {
		return nil, false
	}
	return o.LastErrorAt, true
}

// HasLastErrorAt returns a boolean if a field has been set.
func (o *DatatankPart) HasLastErrorAt() bool {
	if o != nil && o.LastErrorAt != nil {
		return true
	}

	return false
}

// SetLastErrorAt gets a reference to the given string and assigns it to the LastErrorAt field.
func (o *DatatankPart) SetLastErrorAt(v string) {
	o.LastErrorAt = &v
}

// GetLastErrorProcess returns the LastErrorProcess field value if set, zero value otherwise.
func (o *DatatankPart) GetLastErrorProcess() SpProcess {
	if o == nil || o.LastErrorProcess == nil {
		var ret SpProcess
		return ret
	}
	return *o.LastErrorProcess
}

// GetLastErrorProcessOk returns a tuple with the LastErrorProcess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetLastErrorProcessOk() (*SpProcess, bool) {
	if o == nil || o.LastErrorProcess == nil {
		return nil, false
	}
	return o.LastErrorProcess, true
}

// HasLastErrorProcess returns a boolean if a field has been set.
func (o *DatatankPart) HasLastErrorProcess() bool {
	if o != nil && o.LastErrorProcess != nil {
		return true
	}

	return false
}

// SetLastErrorProcess gets a reference to the given SpProcess and assigns it to the LastErrorProcess field.
func (o *DatatankPart) SetLastErrorProcess(v SpProcess) {
	o.LastErrorProcess = &v
}

// GetLastErrorProcessId returns the LastErrorProcessId field value if set, zero value otherwise.
func (o *DatatankPart) GetLastErrorProcessId() string {
	if o == nil || o.LastErrorProcessId == nil {
		var ret string
		return ret
	}
	return *o.LastErrorProcessId
}

// GetLastErrorProcessIdOk returns a tuple with the LastErrorProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetLastErrorProcessIdOk() (*string, bool) {
	if o == nil || o.LastErrorProcessId == nil {
		return nil, false
	}
	return o.LastErrorProcessId, true
}

// HasLastErrorProcessId returns a boolean if a field has been set.
func (o *DatatankPart) HasLastErrorProcessId() bool {
	if o != nil && o.LastErrorProcessId != nil {
		return true
	}

	return false
}

// SetLastErrorProcessId gets a reference to the given string and assigns it to the LastErrorProcessId field.
func (o *DatatankPart) SetLastErrorProcessId(v string) {
	o.LastErrorProcessId = &v
}

// GetLastSuccessfulUpdateAt returns the LastSuccessfulUpdateAt field value if set, zero value otherwise.
func (o *DatatankPart) GetLastSuccessfulUpdateAt() string {
	if o == nil || o.LastSuccessfulUpdateAt == nil {
		var ret string
		return ret
	}
	return *o.LastSuccessfulUpdateAt
}

// GetLastSuccessfulUpdateAtOk returns a tuple with the LastSuccessfulUpdateAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetLastSuccessfulUpdateAtOk() (*string, bool) {
	if o == nil || o.LastSuccessfulUpdateAt == nil {
		return nil, false
	}
	return o.LastSuccessfulUpdateAt, true
}

// HasLastSuccessfulUpdateAt returns a boolean if a field has been set.
func (o *DatatankPart) HasLastSuccessfulUpdateAt() bool {
	if o != nil && o.LastSuccessfulUpdateAt != nil {
		return true
	}

	return false
}

// SetLastSuccessfulUpdateAt gets a reference to the given string and assigns it to the LastSuccessfulUpdateAt field.
func (o *DatatankPart) SetLastSuccessfulUpdateAt(v string) {
	o.LastSuccessfulUpdateAt = &v
}

// GetLastSuccessfulUpdateProcess returns the LastSuccessfulUpdateProcess field value if set, zero value otherwise.
func (o *DatatankPart) GetLastSuccessfulUpdateProcess() SpProcess {
	if o == nil || o.LastSuccessfulUpdateProcess == nil {
		var ret SpProcess
		return ret
	}
	return *o.LastSuccessfulUpdateProcess
}

// GetLastSuccessfulUpdateProcessOk returns a tuple with the LastSuccessfulUpdateProcess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetLastSuccessfulUpdateProcessOk() (*SpProcess, bool) {
	if o == nil || o.LastSuccessfulUpdateProcess == nil {
		return nil, false
	}
	return o.LastSuccessfulUpdateProcess, true
}

// HasLastSuccessfulUpdateProcess returns a boolean if a field has been set.
func (o *DatatankPart) HasLastSuccessfulUpdateProcess() bool {
	if o != nil && o.LastSuccessfulUpdateProcess != nil {
		return true
	}

	return false
}

// SetLastSuccessfulUpdateProcess gets a reference to the given SpProcess and assigns it to the LastSuccessfulUpdateProcess field.
func (o *DatatankPart) SetLastSuccessfulUpdateProcess(v SpProcess) {
	o.LastSuccessfulUpdateProcess = &v
}

// GetLastSuccessfulUpdateProcessId returns the LastSuccessfulUpdateProcessId field value if set, zero value otherwise.
func (o *DatatankPart) GetLastSuccessfulUpdateProcessId() string {
	if o == nil || o.LastSuccessfulUpdateProcessId == nil {
		var ret string
		return ret
	}
	return *o.LastSuccessfulUpdateProcessId
}

// GetLastSuccessfulUpdateProcessIdOk returns a tuple with the LastSuccessfulUpdateProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetLastSuccessfulUpdateProcessIdOk() (*string, bool) {
	if o == nil || o.LastSuccessfulUpdateProcessId == nil {
		return nil, false
	}
	return o.LastSuccessfulUpdateProcessId, true
}

// HasLastSuccessfulUpdateProcessId returns a boolean if a field has been set.
func (o *DatatankPart) HasLastSuccessfulUpdateProcessId() bool {
	if o != nil && o.LastSuccessfulUpdateProcessId != nil {
		return true
	}

	return false
}

// SetLastSuccessfulUpdateProcessId gets a reference to the given string and assigns it to the LastSuccessfulUpdateProcessId field.
func (o *DatatankPart) SetLastSuccessfulUpdateProcessId(v string) {
	o.LastSuccessfulUpdateProcessId = &v
}

// GetLastUpdateAttemptAt returns the LastUpdateAttemptAt field value if set, zero value otherwise.
func (o *DatatankPart) GetLastUpdateAttemptAt() string {
	if o == nil || o.LastUpdateAttemptAt == nil {
		var ret string
		return ret
	}
	return *o.LastUpdateAttemptAt
}

// GetLastUpdateAttemptAtOk returns a tuple with the LastUpdateAttemptAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetLastUpdateAttemptAtOk() (*string, bool) {
	if o == nil || o.LastUpdateAttemptAt == nil {
		return nil, false
	}
	return o.LastUpdateAttemptAt, true
}

// HasLastUpdateAttemptAt returns a boolean if a field has been set.
func (o *DatatankPart) HasLastUpdateAttemptAt() bool {
	if o != nil && o.LastUpdateAttemptAt != nil {
		return true
	}

	return false
}

// SetLastUpdateAttemptAt gets a reference to the given string and assigns it to the LastUpdateAttemptAt field.
func (o *DatatankPart) SetLastUpdateAttemptAt(v string) {
	o.LastUpdateAttemptAt = &v
}

// GetLastUpdateAttemptProcess returns the LastUpdateAttemptProcess field value if set, zero value otherwise.
func (o *DatatankPart) GetLastUpdateAttemptProcess() SpProcess {
	if o == nil || o.LastUpdateAttemptProcess == nil {
		var ret SpProcess
		return ret
	}
	return *o.LastUpdateAttemptProcess
}

// GetLastUpdateAttemptProcessOk returns a tuple with the LastUpdateAttemptProcess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetLastUpdateAttemptProcessOk() (*SpProcess, bool) {
	if o == nil || o.LastUpdateAttemptProcess == nil {
		return nil, false
	}
	return o.LastUpdateAttemptProcess, true
}

// HasLastUpdateAttemptProcess returns a boolean if a field has been set.
func (o *DatatankPart) HasLastUpdateAttemptProcess() bool {
	if o != nil && o.LastUpdateAttemptProcess != nil {
		return true
	}

	return false
}

// SetLastUpdateAttemptProcess gets a reference to the given SpProcess and assigns it to the LastUpdateAttemptProcess field.
func (o *DatatankPart) SetLastUpdateAttemptProcess(v SpProcess) {
	o.LastUpdateAttemptProcess = &v
}

// GetLastUpdateAttemptProcessId returns the LastUpdateAttemptProcessId field value if set, zero value otherwise.
func (o *DatatankPart) GetLastUpdateAttemptProcessId() string {
	if o == nil || o.LastUpdateAttemptProcessId == nil {
		var ret string
		return ret
	}
	return *o.LastUpdateAttemptProcessId
}

// GetLastUpdateAttemptProcessIdOk returns a tuple with the LastUpdateAttemptProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetLastUpdateAttemptProcessIdOk() (*string, bool) {
	if o == nil || o.LastUpdateAttemptProcessId == nil {
		return nil, false
	}
	return o.LastUpdateAttemptProcessId, true
}

// HasLastUpdateAttemptProcessId returns a boolean if a field has been set.
func (o *DatatankPart) HasLastUpdateAttemptProcessId() bool {
	if o != nil && o.LastUpdateAttemptProcessId != nil {
		return true
	}

	return false
}

// SetLastUpdateAttemptProcessId gets a reference to the given string and assigns it to the LastUpdateAttemptProcessId field.
func (o *DatatankPart) SetLastUpdateAttemptProcessId(v string) {
	o.LastUpdateAttemptProcessId = &v
}

// GetMigratingFreshnessState returns the MigratingFreshnessState field value if set, zero value otherwise.
func (o *DatatankPart) GetMigratingFreshnessState() string {
	if o == nil || o.MigratingFreshnessState == nil {
		var ret string
		return ret
	}
	return *o.MigratingFreshnessState
}

// GetMigratingFreshnessStateOk returns a tuple with the MigratingFreshnessState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetMigratingFreshnessStateOk() (*string, bool) {
	if o == nil || o.MigratingFreshnessState == nil {
		return nil, false
	}
	return o.MigratingFreshnessState, true
}

// HasMigratingFreshnessState returns a boolean if a field has been set.
func (o *DatatankPart) HasMigratingFreshnessState() bool {
	if o != nil && o.MigratingFreshnessState != nil {
		return true
	}

	return false
}

// SetMigratingFreshnessState gets a reference to the given string and assigns it to the MigratingFreshnessState field.
func (o *DatatankPart) SetMigratingFreshnessState(v string) {
	o.MigratingFreshnessState = &v
}

// GetMigratingLastErrorAt returns the MigratingLastErrorAt field value if set, zero value otherwise.
func (o *DatatankPart) GetMigratingLastErrorAt() string {
	if o == nil || o.MigratingLastErrorAt == nil {
		var ret string
		return ret
	}
	return *o.MigratingLastErrorAt
}

// GetMigratingLastErrorAtOk returns a tuple with the MigratingLastErrorAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetMigratingLastErrorAtOk() (*string, bool) {
	if o == nil || o.MigratingLastErrorAt == nil {
		return nil, false
	}
	return o.MigratingLastErrorAt, true
}

// HasMigratingLastErrorAt returns a boolean if a field has been set.
func (o *DatatankPart) HasMigratingLastErrorAt() bool {
	if o != nil && o.MigratingLastErrorAt != nil {
		return true
	}

	return false
}

// SetMigratingLastErrorAt gets a reference to the given string and assigns it to the MigratingLastErrorAt field.
func (o *DatatankPart) SetMigratingLastErrorAt(v string) {
	o.MigratingLastErrorAt = &v
}

// GetMigratingLastErrorProcessId returns the MigratingLastErrorProcessId field value if set, zero value otherwise.
func (o *DatatankPart) GetMigratingLastErrorProcessId() string {
	if o == nil || o.MigratingLastErrorProcessId == nil {
		var ret string
		return ret
	}
	return *o.MigratingLastErrorProcessId
}

// GetMigratingLastErrorProcessIdOk returns a tuple with the MigratingLastErrorProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetMigratingLastErrorProcessIdOk() (*string, bool) {
	if o == nil || o.MigratingLastErrorProcessId == nil {
		return nil, false
	}
	return o.MigratingLastErrorProcessId, true
}

// HasMigratingLastErrorProcessId returns a boolean if a field has been set.
func (o *DatatankPart) HasMigratingLastErrorProcessId() bool {
	if o != nil && o.MigratingLastErrorProcessId != nil {
		return true
	}

	return false
}

// SetMigratingLastErrorProcessId gets a reference to the given string and assigns it to the MigratingLastErrorProcessId field.
func (o *DatatankPart) SetMigratingLastErrorProcessId(v string) {
	o.MigratingLastErrorProcessId = &v
}

// GetMigratingLastSuccessfulUpdateAt returns the MigratingLastSuccessfulUpdateAt field value if set, zero value otherwise.
func (o *DatatankPart) GetMigratingLastSuccessfulUpdateAt() string {
	if o == nil || o.MigratingLastSuccessfulUpdateAt == nil {
		var ret string
		return ret
	}
	return *o.MigratingLastSuccessfulUpdateAt
}

// GetMigratingLastSuccessfulUpdateAtOk returns a tuple with the MigratingLastSuccessfulUpdateAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetMigratingLastSuccessfulUpdateAtOk() (*string, bool) {
	if o == nil || o.MigratingLastSuccessfulUpdateAt == nil {
		return nil, false
	}
	return o.MigratingLastSuccessfulUpdateAt, true
}

// HasMigratingLastSuccessfulUpdateAt returns a boolean if a field has been set.
func (o *DatatankPart) HasMigratingLastSuccessfulUpdateAt() bool {
	if o != nil && o.MigratingLastSuccessfulUpdateAt != nil {
		return true
	}

	return false
}

// SetMigratingLastSuccessfulUpdateAt gets a reference to the given string and assigns it to the MigratingLastSuccessfulUpdateAt field.
func (o *DatatankPart) SetMigratingLastSuccessfulUpdateAt(v string) {
	o.MigratingLastSuccessfulUpdateAt = &v
}

// GetMigratingLastSuccessfulUpdateProcess returns the MigratingLastSuccessfulUpdateProcess field value if set, zero value otherwise.
func (o *DatatankPart) GetMigratingLastSuccessfulUpdateProcess() SpProcess {
	if o == nil || o.MigratingLastSuccessfulUpdateProcess == nil {
		var ret SpProcess
		return ret
	}
	return *o.MigratingLastSuccessfulUpdateProcess
}

// GetMigratingLastSuccessfulUpdateProcessOk returns a tuple with the MigratingLastSuccessfulUpdateProcess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetMigratingLastSuccessfulUpdateProcessOk() (*SpProcess, bool) {
	if o == nil || o.MigratingLastSuccessfulUpdateProcess == nil {
		return nil, false
	}
	return o.MigratingLastSuccessfulUpdateProcess, true
}

// HasMigratingLastSuccessfulUpdateProcess returns a boolean if a field has been set.
func (o *DatatankPart) HasMigratingLastSuccessfulUpdateProcess() bool {
	if o != nil && o.MigratingLastSuccessfulUpdateProcess != nil {
		return true
	}

	return false
}

// SetMigratingLastSuccessfulUpdateProcess gets a reference to the given SpProcess and assigns it to the MigratingLastSuccessfulUpdateProcess field.
func (o *DatatankPart) SetMigratingLastSuccessfulUpdateProcess(v SpProcess) {
	o.MigratingLastSuccessfulUpdateProcess = &v
}

// GetMigratingLastSuccessfulUpdateProcessId returns the MigratingLastSuccessfulUpdateProcessId field value if set, zero value otherwise.
func (o *DatatankPart) GetMigratingLastSuccessfulUpdateProcessId() string {
	if o == nil || o.MigratingLastSuccessfulUpdateProcessId == nil {
		var ret string
		return ret
	}
	return *o.MigratingLastSuccessfulUpdateProcessId
}

// GetMigratingLastSuccessfulUpdateProcessIdOk returns a tuple with the MigratingLastSuccessfulUpdateProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetMigratingLastSuccessfulUpdateProcessIdOk() (*string, bool) {
	if o == nil || o.MigratingLastSuccessfulUpdateProcessId == nil {
		return nil, false
	}
	return o.MigratingLastSuccessfulUpdateProcessId, true
}

// HasMigratingLastSuccessfulUpdateProcessId returns a boolean if a field has been set.
func (o *DatatankPart) HasMigratingLastSuccessfulUpdateProcessId() bool {
	if o != nil && o.MigratingLastSuccessfulUpdateProcessId != nil {
		return true
	}

	return false
}

// SetMigratingLastSuccessfulUpdateProcessId gets a reference to the given string and assigns it to the MigratingLastSuccessfulUpdateProcessId field.
func (o *DatatankPart) SetMigratingLastSuccessfulUpdateProcessId(v string) {
	o.MigratingLastSuccessfulUpdateProcessId = &v
}

// GetMigratingLastUpdateAttemptAt returns the MigratingLastUpdateAttemptAt field value if set, zero value otherwise.
func (o *DatatankPart) GetMigratingLastUpdateAttemptAt() string {
	if o == nil || o.MigratingLastUpdateAttemptAt == nil {
		var ret string
		return ret
	}
	return *o.MigratingLastUpdateAttemptAt
}

// GetMigratingLastUpdateAttemptAtOk returns a tuple with the MigratingLastUpdateAttemptAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetMigratingLastUpdateAttemptAtOk() (*string, bool) {
	if o == nil || o.MigratingLastUpdateAttemptAt == nil {
		return nil, false
	}
	return o.MigratingLastUpdateAttemptAt, true
}

// HasMigratingLastUpdateAttemptAt returns a boolean if a field has been set.
func (o *DatatankPart) HasMigratingLastUpdateAttemptAt() bool {
	if o != nil && o.MigratingLastUpdateAttemptAt != nil {
		return true
	}

	return false
}

// SetMigratingLastUpdateAttemptAt gets a reference to the given string and assigns it to the MigratingLastUpdateAttemptAt field.
func (o *DatatankPart) SetMigratingLastUpdateAttemptAt(v string) {
	o.MigratingLastUpdateAttemptAt = &v
}

// GetMigratingLastUpdateAttemptProcess returns the MigratingLastUpdateAttemptProcess field value if set, zero value otherwise.
func (o *DatatankPart) GetMigratingLastUpdateAttemptProcess() SpProcess {
	if o == nil || o.MigratingLastUpdateAttemptProcess == nil {
		var ret SpProcess
		return ret
	}
	return *o.MigratingLastUpdateAttemptProcess
}

// GetMigratingLastUpdateAttemptProcessOk returns a tuple with the MigratingLastUpdateAttemptProcess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetMigratingLastUpdateAttemptProcessOk() (*SpProcess, bool) {
	if o == nil || o.MigratingLastUpdateAttemptProcess == nil {
		return nil, false
	}
	return o.MigratingLastUpdateAttemptProcess, true
}

// HasMigratingLastUpdateAttemptProcess returns a boolean if a field has been set.
func (o *DatatankPart) HasMigratingLastUpdateAttemptProcess() bool {
	if o != nil && o.MigratingLastUpdateAttemptProcess != nil {
		return true
	}

	return false
}

// SetMigratingLastUpdateAttemptProcess gets a reference to the given SpProcess and assigns it to the MigratingLastUpdateAttemptProcess field.
func (o *DatatankPart) SetMigratingLastUpdateAttemptProcess(v SpProcess) {
	o.MigratingLastUpdateAttemptProcess = &v
}

// GetMigratingLastUpdateAttemptProcessId returns the MigratingLastUpdateAttemptProcessId field value if set, zero value otherwise.
func (o *DatatankPart) GetMigratingLastUpdateAttemptProcessId() string {
	if o == nil || o.MigratingLastUpdateAttemptProcessId == nil {
		var ret string
		return ret
	}
	return *o.MigratingLastUpdateAttemptProcessId
}

// GetMigratingLastUpdateAttemptProcessIdOk returns a tuple with the MigratingLastUpdateAttemptProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetMigratingLastUpdateAttemptProcessIdOk() (*string, bool) {
	if o == nil || o.MigratingLastUpdateAttemptProcessId == nil {
		return nil, false
	}
	return o.MigratingLastUpdateAttemptProcessId, true
}

// HasMigratingLastUpdateAttemptProcessId returns a boolean if a field has been set.
func (o *DatatankPart) HasMigratingLastUpdateAttemptProcessId() bool {
	if o != nil && o.MigratingLastUpdateAttemptProcessId != nil {
		return true
	}

	return false
}

// SetMigratingLastUpdateAttemptProcessId gets a reference to the given string and assigns it to the MigratingLastUpdateAttemptProcessId field.
func (o *DatatankPart) SetMigratingLastUpdateAttemptProcessId(v string) {
	o.MigratingLastUpdateAttemptProcessId = &v
}

// GetPartitionCandidate returns the PartitionCandidate field value if set, zero value otherwise.
func (o *DatatankPart) GetPartitionCandidate() string {
	if o == nil || o.PartitionCandidate == nil {
		var ret string
		return ret
	}
	return *o.PartitionCandidate
}

// GetPartitionCandidateOk returns a tuple with the PartitionCandidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetPartitionCandidateOk() (*string, bool) {
	if o == nil || o.PartitionCandidate == nil {
		return nil, false
	}
	return o.PartitionCandidate, true
}

// HasPartitionCandidate returns a boolean if a field has been set.
func (o *DatatankPart) HasPartitionCandidate() bool {
	if o != nil && o.PartitionCandidate != nil {
		return true
	}

	return false
}

// SetPartitionCandidate gets a reference to the given string and assigns it to the PartitionCandidate field.
func (o *DatatankPart) SetPartitionCandidate(v string) {
	o.PartitionCandidate = &v
}

// GetPartitionCurrent returns the PartitionCurrent field value
func (o *DatatankPart) GetPartitionCurrent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PartitionCurrent
}

// GetPartitionCurrentOk returns a tuple with the PartitionCurrent field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetPartitionCurrentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartitionCurrent, true
}

// SetPartitionCurrent sets field value
func (o *DatatankPart) SetPartitionCurrent(v string) {
	o.PartitionCurrent = v
}

// GetPipeline returns the Pipeline field value if set, zero value otherwise.
func (o *DatatankPart) GetPipeline() Pipeline {
	if o == nil || o.Pipeline == nil {
		var ret Pipeline
		return ret
	}
	return *o.Pipeline
}

// GetPipelineOk returns a tuple with the Pipeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetPipelineOk() (*Pipeline, bool) {
	if o == nil || o.Pipeline == nil {
		return nil, false
	}
	return o.Pipeline, true
}

// HasPipeline returns a boolean if a field has been set.
func (o *DatatankPart) HasPipeline() bool {
	if o != nil && o.Pipeline != nil {
		return true
	}

	return false
}

// SetPipeline gets a reference to the given Pipeline and assigns it to the Pipeline field.
func (o *DatatankPart) SetPipeline(v Pipeline) {
	o.Pipeline = &v
}

// GetPipelineId returns the PipelineId field value
func (o *DatatankPart) GetPipelineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineId
}

// GetPipelineIdOk returns a tuple with the PipelineId field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetPipelineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineId, true
}

// SetPipelineId sets field value
func (o *DatatankPart) SetPipelineId(v string) {
	o.PipelineId = v
}

// GetSourceConnection returns the SourceConnection field value if set, zero value otherwise.
func (o *DatatankPart) GetSourceConnection() WorkspaceSchema {
	if o == nil || o.SourceConnection == nil {
		var ret WorkspaceSchema
		return ret
	}
	return *o.SourceConnection
}

// GetSourceConnectionOk returns a tuple with the SourceConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetSourceConnectionOk() (*WorkspaceSchema, bool) {
	if o == nil || o.SourceConnection == nil {
		return nil, false
	}
	return o.SourceConnection, true
}

// HasSourceConnection returns a boolean if a field has been set.
func (o *DatatankPart) HasSourceConnection() bool {
	if o != nil && o.SourceConnection != nil {
		return true
	}

	return false
}

// SetSourceConnection gets a reference to the given WorkspaceSchema and assigns it to the SourceConnection field.
func (o *DatatankPart) SetSourceConnection(v WorkspaceSchema) {
	o.SourceConnection = &v
}

// GetSourceConnectionId returns the SourceConnectionId field value if set, zero value otherwise.
func (o *DatatankPart) GetSourceConnectionId() string {
	if o == nil || o.SourceConnectionId == nil {
		var ret string
		return ret
	}
	return *o.SourceConnectionId
}

// GetSourceConnectionIdOk returns a tuple with the SourceConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetSourceConnectionIdOk() (*string, bool) {
	if o == nil || o.SourceConnectionId == nil {
		return nil, false
	}
	return o.SourceConnectionId, true
}

// HasSourceConnectionId returns a boolean if a field has been set.
func (o *DatatankPart) HasSourceConnectionId() bool {
	if o != nil && o.SourceConnectionId != nil {
		return true
	}

	return false
}

// SetSourceConnectionId gets a reference to the given string and assigns it to the SourceConnectionId field.
func (o *DatatankPart) SetSourceConnectionId(v string) {
	o.SourceConnectionId = &v
}

// GetState returns the State field value
func (o *DatatankPart) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *DatatankPart) SetState(v string) {
	o.State = v
}

// GetStateReason returns the StateReason field value if set, zero value otherwise.
func (o *DatatankPart) GetStateReason() string {
	if o == nil || o.StateReason == nil {
		var ret string
		return ret
	}
	return *o.StateReason
}

// GetStateReasonOk returns a tuple with the StateReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetStateReasonOk() (*string, bool) {
	if o == nil || o.StateReason == nil {
		return nil, false
	}
	return o.StateReason, true
}

// HasStateReason returns a boolean if a field has been set.
func (o *DatatankPart) HasStateReason() bool {
	if o != nil && o.StateReason != nil {
		return true
	}

	return false
}

// SetStateReason gets a reference to the given string and assigns it to the StateReason field.
func (o *DatatankPart) SetStateReason(v string) {
	o.StateReason = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DatatankPart) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DatatankPart) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *DatatankPart) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *DatatankPart) GetUpdatedBy() User {
	if o == nil || o.UpdatedBy == nil {
		var ret User
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetUpdatedByOk() (*User, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *DatatankPart) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given User and assigns it to the UpdatedBy field.
func (o *DatatankPart) SetUpdatedBy(v User) {
	o.UpdatedBy = &v
}

// GetUpdatedById returns the UpdatedById field value
func (o *DatatankPart) GetUpdatedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedById
}

// GetUpdatedByIdOk returns a tuple with the UpdatedById field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetUpdatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedById, true
}

// SetUpdatedById sets field value
func (o *DatatankPart) SetUpdatedById(v string) {
	o.UpdatedById = v
}

// GetVersionId returns the VersionId field value
func (o *DatatankPart) GetVersionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value
// and a boolean to check if the value has been set.
func (o *DatatankPart) GetVersionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionId, true
}

// SetVersionId sets field value
func (o *DatatankPart) SetVersionId(v int32) {
	o.VersionId = v
}

func (o DatatankPart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["created_by"] = o.CreatedBy
	}
	if true {
		toSerialize["created_by_id"] = o.CreatedById
	}
	if o.DatatankTable != nil {
		toSerialize["datatank_table"] = o.DatatankTable
	}
	if true {
		toSerialize["datatank_table_id"] = o.DatatankTableId
	}
	if o.DeletedAt != nil {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if o.DeletedBy != nil {
		toSerialize["deleted_by"] = o.DeletedBy
	}
	if true {
		toSerialize["deleted_by_id"] = o.DeletedById
	}
	if true {
		toSerialize["desired_state"] = o.DesiredState
	}
	if true {
		toSerialize["frequency"] = o.Frequency
	}
	if true {
		toSerialize["freshness_state"] = o.FreshnessState
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.LastErrorAt != nil {
		toSerialize["last_error_at"] = o.LastErrorAt
	}
	if o.LastErrorProcess != nil {
		toSerialize["last_error_process"] = o.LastErrorProcess
	}
	if o.LastErrorProcessId != nil {
		toSerialize["last_error_process_id"] = o.LastErrorProcessId
	}
	if o.LastSuccessfulUpdateAt != nil {
		toSerialize["last_successful_update_at"] = o.LastSuccessfulUpdateAt
	}
	if o.LastSuccessfulUpdateProcess != nil {
		toSerialize["last_successful_update_process"] = o.LastSuccessfulUpdateProcess
	}
	if o.LastSuccessfulUpdateProcessId != nil {
		toSerialize["last_successful_update_process_id"] = o.LastSuccessfulUpdateProcessId
	}
	if o.LastUpdateAttemptAt != nil {
		toSerialize["last_update_attempt_at"] = o.LastUpdateAttemptAt
	}
	if o.LastUpdateAttemptProcess != nil {
		toSerialize["last_update_attempt_process"] = o.LastUpdateAttemptProcess
	}
	if o.LastUpdateAttemptProcessId != nil {
		toSerialize["last_update_attempt_process_id"] = o.LastUpdateAttemptProcessId
	}
	if o.MigratingFreshnessState != nil {
		toSerialize["migrating_freshness_state"] = o.MigratingFreshnessState
	}
	if o.MigratingLastErrorAt != nil {
		toSerialize["migrating_last_error_at"] = o.MigratingLastErrorAt
	}
	if o.MigratingLastErrorProcessId != nil {
		toSerialize["migrating_last_error_process_id"] = o.MigratingLastErrorProcessId
	}
	if o.MigratingLastSuccessfulUpdateAt != nil {
		toSerialize["migrating_last_successful_update_at"] = o.MigratingLastSuccessfulUpdateAt
	}
	if o.MigratingLastSuccessfulUpdateProcess != nil {
		toSerialize["migrating_last_successful_update_process"] = o.MigratingLastSuccessfulUpdateProcess
	}
	if o.MigratingLastSuccessfulUpdateProcessId != nil {
		toSerialize["migrating_last_successful_update_process_id"] = o.MigratingLastSuccessfulUpdateProcessId
	}
	if o.MigratingLastUpdateAttemptAt != nil {
		toSerialize["migrating_last_update_attempt_at"] = o.MigratingLastUpdateAttemptAt
	}
	if o.MigratingLastUpdateAttemptProcess != nil {
		toSerialize["migrating_last_update_attempt_process"] = o.MigratingLastUpdateAttemptProcess
	}
	if o.MigratingLastUpdateAttemptProcessId != nil {
		toSerialize["migrating_last_update_attempt_process_id"] = o.MigratingLastUpdateAttemptProcessId
	}
	if o.PartitionCandidate != nil {
		toSerialize["partition_candidate"] = o.PartitionCandidate
	}
	if true {
		toSerialize["partition_current"] = o.PartitionCurrent
	}
	if o.Pipeline != nil {
		toSerialize["pipeline"] = o.Pipeline
	}
	if true {
		toSerialize["pipeline_id"] = o.PipelineId
	}
	if o.SourceConnection != nil {
		toSerialize["source_connection"] = o.SourceConnection
	}
	if o.SourceConnectionId != nil {
		toSerialize["source_connection_id"] = o.SourceConnectionId
	}
	if true {
		toSerialize["state"] = o.State
	}
	if o.StateReason != nil {
		toSerialize["state_reason"] = o.StateReason
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	if true {
		toSerialize["updated_by_id"] = o.UpdatedById
	}
	if true {
		toSerialize["version_id"] = o.VersionId
	}
	return json.Marshal(toSerialize)
}

type NullableDatatankPart struct {
	value *DatatankPart
	isSet bool
}

func (v NullableDatatankPart) Get() *DatatankPart {
	return v.value
}

func (v *NullableDatatankPart) Set(val *DatatankPart) {
	v.value = val
	v.isSet = true
}

func (v NullableDatatankPart) IsSet() bool {
	return v.isSet
}

func (v *NullableDatatankPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatatankPart(val *DatatankPart) *NullableDatatankPart {
	return &NullableDatatankPart{value: val, isSet: true}
}

func (v NullableDatatankPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatatankPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
