/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// WorkspaceInstanceType the model 'WorkspaceInstanceType'
type WorkspaceInstanceType string

// List of WorkspaceInstanceType
const (
	WorkspaceInstanceTypeDB1Shared WorkspaceInstanceType = "db1.shared"
	WorkspaceInstanceTypeDB1Small  WorkspaceInstanceType = "db1.small"
	WorkspaceInstanceTypeDB1Medium WorkspaceInstanceType = "db1.medium"
)

// All allowed values of WorkspaceInstanceType enum
var AllowedWorkspaceInstanceTypeEnumValues = []WorkspaceInstanceType{
	"db1.shared",
	"db1.small",
	"db1.medium",
}

func (v *WorkspaceInstanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkspaceInstanceType(value)
	for _, existing := range AllowedWorkspaceInstanceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkspaceInstanceType", value)
}

// NewWorkspaceInstanceTypeFromValue returns a pointer to a valid WorkspaceInstanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkspaceInstanceTypeFromValue(v string) (*WorkspaceInstanceType, error) {
	ev := WorkspaceInstanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkspaceInstanceType: valid values are %v", v, AllowedWorkspaceInstanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkspaceInstanceType) IsValid() bool {
	for _, existing := range AllowedWorkspaceInstanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkspaceInstanceType value
func (v WorkspaceInstanceType) Ptr() *WorkspaceInstanceType {
	return &v
}

type NullableWorkspaceInstanceType struct {
	value *WorkspaceInstanceType
	isSet bool
}

func (v NullableWorkspaceInstanceType) Get() *WorkspaceInstanceType {
	return v.value
}

func (v *NullableWorkspaceInstanceType) Set(val *WorkspaceInstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspaceInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspaceInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspaceInstanceType(val *WorkspaceInstanceType) *NullableWorkspaceInstanceType {
	return &NullableWorkspaceInstanceType{value: val, isSet: true}
}

func (v NullableWorkspaceInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspaceInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
