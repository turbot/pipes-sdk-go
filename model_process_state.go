/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// ProcessState the model 'ProcessState'
type ProcessState string

// List of ProcessState
const (
	ProcessPending   ProcessState = "pending"
	ProcessPaused    ProcessState = "paused"
	ProcessRunning   ProcessState = "running"
	ProcessFailed    ProcessState = "failed"
	ProcessCompleted ProcessState = "completed"
	ProcessCanceled  ProcessState = "canceled"
)

// All allowed values of ProcessState enum
var AllowedProcessStateEnumValues = []ProcessState{
	"pending",
	"paused",
	"running",
	"failed",
	"completed",
	"canceled",
}

func (v *ProcessState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProcessState(value)
	for _, existing := range AllowedProcessStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProcessState", value)
}

// NewProcessStateFromValue returns a pointer to a valid ProcessState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProcessStateFromValue(v string) (*ProcessState, error) {
	ev := ProcessState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProcessState: valid values are %v", v, AllowedProcessStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProcessState) IsValid() bool {
	for _, existing := range AllowedProcessStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProcessState value
func (v ProcessState) Ptr() *ProcessState {
	return &v
}

type NullableProcessState struct {
	value *ProcessState
	isSet bool
}

func (v NullableProcessState) Get() *ProcessState {
	return v.value
}

func (v *NullableProcessState) Set(val *ProcessState) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessState) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessState(val *ProcessState) *NullableProcessState {
	return &NullableProcessState{value: val, isSet: true}
}

func (v NullableProcessState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
