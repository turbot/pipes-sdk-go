/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// DatatankState the model 'DatatankState'
type DatatankState string

// List of DatatankState
const (
	DatatankEnabled  DatatankState = "enabled"
	DatatankPaused   DatatankState = "paused"
	DatatankDisabled DatatankState = "disabled"
	DatatankDeleted  DatatankState = "deleted"
)

// All allowed values of DatatankState enum
var AllowedDatatankStateEnumValues = []DatatankState{
	"enabled",
	"paused",
	"disabled",
	"deleted",
}

func (v *DatatankState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatatankState(value)
	for _, existing := range AllowedDatatankStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatatankState", value)
}

// NewDatatankStateFromValue returns a pointer to a valid DatatankState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatatankStateFromValue(v string) (*DatatankState, error) {
	ev := DatatankState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatatankState: valid values are %v", v, AllowedDatatankStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatatankState) IsValid() bool {
	for _, existing := range AllowedDatatankStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatatankState value
func (v DatatankState) Ptr() *DatatankState {
	return &v
}

type NullableDatatankState struct {
	value *DatatankState
	isSet bool
}

func (v NullableDatatankState) Get() *DatatankState {
	return v.value
}

func (v *NullableDatatankState) Set(val *DatatankState) {
	v.value = val
	v.isSet = true
}

func (v NullableDatatankState) IsSet() bool {
	return v.isSet
}

func (v *NullableDatatankState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatatankState(val *DatatankState) *NullableDatatankState {
	return &NullableDatatankState{value: val, isSet: true}
}

func (v NullableDatatankState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatatankState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
