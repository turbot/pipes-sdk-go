/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// TestIntegrationRequest struct for TestIntegrationRequest
type TestIntegrationRequest struct {
	Config *map[string]interface{} `json:"config,omitempty"`
	Type   *IntegrationType        `json:"type,omitempty"`
}

// NewTestIntegrationRequest instantiates a new TestIntegrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestIntegrationRequest() *TestIntegrationRequest {
	this := TestIntegrationRequest{}
	return &this
}

// NewTestIntegrationRequestWithDefaults instantiates a new TestIntegrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestIntegrationRequestWithDefaults() *TestIntegrationRequest {
	this := TestIntegrationRequest{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *TestIntegrationRequest) GetConfig() map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestIntegrationRequest) GetConfigOk() (*map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *TestIntegrationRequest) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *TestIntegrationRequest) SetConfig(v map[string]interface{}) {
	o.Config = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TestIntegrationRequest) GetType() IntegrationType {
	if o == nil || o.Type == nil {
		var ret IntegrationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestIntegrationRequest) GetTypeOk() (*IntegrationType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TestIntegrationRequest) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given IntegrationType and assigns it to the Type field.
func (o *TestIntegrationRequest) SetType(v IntegrationType) {
	o.Type = &v
}

func (o TestIntegrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTestIntegrationRequest struct {
	value *TestIntegrationRequest
	isSet bool
}

func (v NullableTestIntegrationRequest) Get() *TestIntegrationRequest {
	return v.value
}

func (v *NullableTestIntegrationRequest) Set(val *TestIntegrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestIntegrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestIntegrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestIntegrationRequest(val *TestIntegrationRequest) *NullableTestIntegrationRequest {
	return &NullableTestIntegrationRequest{value: val, isSet: true}
}

func (v NullableTestIntegrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestIntegrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
