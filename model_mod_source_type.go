/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// ModSourceType the model 'ModSourceType'
type ModSourceType string

// List of ModSourceType
const (
	ModSourceTypeRepository ModSourceType = "repository"
	ModSourceTypeArchive    ModSourceType = "archive"
)

// All allowed values of ModSourceType enum
var AllowedModSourceTypeEnumValues = []ModSourceType{
	"repository",
	"archive",
}

func (v *ModSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModSourceType(value)
	for _, existing := range AllowedModSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModSourceType", value)
}

// NewModSourceTypeFromValue returns a pointer to a valid ModSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModSourceTypeFromValue(v string) (*ModSourceType, error) {
	ev := ModSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModSourceType: valid values are %v", v, AllowedModSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModSourceType) IsValid() bool {
	for _, existing := range AllowedModSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModSourceType value
func (v ModSourceType) Ptr() *ModSourceType {
	return &v
}

type NullableModSourceType struct {
	value *ModSourceType
	isSet bool
}

func (v NullableModSourceType) Get() *ModSourceType {
	return v.value
}

func (v *NullableModSourceType) Set(val *ModSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableModSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableModSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModSourceType(val *ModSourceType) *NullableModSourceType {
	return &NullableModSourceType{value: val, isSet: true}
}

func (v NullableModSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
