/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// ConnectionConfigSource the model 'ConnectionConfigSource'
type ConnectionConfigSource string

// List of ConnectionConfigSource
const (
	ConnectionConfigSourceSelf      ConnectionConfigSource = "self"
	ConnectionConfigSourceInherited ConnectionConfigSource = "inherited"
)

// All allowed values of ConnectionConfigSource enum
var AllowedConnectionConfigSourceEnumValues = []ConnectionConfigSource{
	"self",
	"inherited",
}

func (v *ConnectionConfigSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionConfigSource(value)
	for _, existing := range AllowedConnectionConfigSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionConfigSource", value)
}

// NewConnectionConfigSourceFromValue returns a pointer to a valid ConnectionConfigSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionConfigSourceFromValue(v string) (*ConnectionConfigSource, error) {
	ev := ConnectionConfigSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionConfigSource: valid values are %v", v, AllowedConnectionConfigSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionConfigSource) IsValid() bool {
	for _, existing := range AllowedConnectionConfigSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionConfigSource value
func (v ConnectionConfigSource) Ptr() *ConnectionConfigSource {
	return &v
}

type NullableConnectionConfigSource struct {
	value *ConnectionConfigSource
	isSet bool
}

func (v NullableConnectionConfigSource) Get() *ConnectionConfigSource {
	return v.value
}

func (v *NullableConnectionConfigSource) Set(val *ConnectionConfigSource) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionConfigSource) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionConfigSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionConfigSource(val *ConnectionConfigSource) *NullableConnectionConfigSource {
	return &NullableConnectionConfigSource{value: val, isSet: true}
}

func (v NullableConnectionConfigSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionConfigSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
