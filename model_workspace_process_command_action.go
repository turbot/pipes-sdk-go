/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// WorkspaceProcessCommandAction the model 'WorkspaceProcessCommandAction'
type WorkspaceProcessCommandAction string

// List of WorkspaceProcessCommandAction
const (
	WorkspaceProcessCommandTerminate WorkspaceProcessCommandAction = "terminate"
)

// All allowed values of WorkspaceProcessCommandAction enum
var AllowedWorkspaceProcessCommandActionEnumValues = []WorkspaceProcessCommandAction{
	"terminate",
}

func (v *WorkspaceProcessCommandAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkspaceProcessCommandAction(value)
	for _, existing := range AllowedWorkspaceProcessCommandActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkspaceProcessCommandAction", value)
}

// NewWorkspaceProcessCommandActionFromValue returns a pointer to a valid WorkspaceProcessCommandAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkspaceProcessCommandActionFromValue(v string) (*WorkspaceProcessCommandAction, error) {
	ev := WorkspaceProcessCommandAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkspaceProcessCommandAction: valid values are %v", v, AllowedWorkspaceProcessCommandActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkspaceProcessCommandAction) IsValid() bool {
	for _, existing := range AllowedWorkspaceProcessCommandActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkspaceProcessCommandAction value
func (v WorkspaceProcessCommandAction) Ptr() *WorkspaceProcessCommandAction {
	return &v
}

type NullableWorkspaceProcessCommandAction struct {
	value *WorkspaceProcessCommandAction
	isSet bool
}

func (v NullableWorkspaceProcessCommandAction) Get() *WorkspaceProcessCommandAction {
	return v.value
}

func (v *NullableWorkspaceProcessCommandAction) Set(val *WorkspaceProcessCommandAction) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspaceProcessCommandAction) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspaceProcessCommandAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspaceProcessCommandAction(val *WorkspaceProcessCommandAction) *NullableWorkspaceProcessCommandAction {
	return &NullableWorkspaceProcessCommandAction{value: val, isSet: true}
}

func (v NullableWorkspaceProcessCommandAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspaceProcessCommandAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
