/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// TenantLoginSettings struct for TenantLoginSettings
type TenantLoginSettings struct {
	State string `json:"state"`
	Type  string `json:"type"`
}

// NewTenantLoginSettings instantiates a new TenantLoginSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantLoginSettings(state string, type_ string) *TenantLoginSettings {
	this := TenantLoginSettings{}
	this.State = state
	this.Type = type_
	return &this
}

// NewTenantLoginSettingsWithDefaults instantiates a new TenantLoginSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantLoginSettingsWithDefaults() *TenantLoginSettings {
	this := TenantLoginSettings{}
	return &this
}

// GetState returns the State field value
func (o *TenantLoginSettings) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *TenantLoginSettings) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *TenantLoginSettings) SetState(v string) {
	o.State = v
}

// GetType returns the Type field value
func (o *TenantLoginSettings) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TenantLoginSettings) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TenantLoginSettings) SetType(v string) {
	o.Type = v
}

func (o TenantLoginSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTenantLoginSettings struct {
	value *TenantLoginSettings
	isSet bool
}

func (v NullableTenantLoginSettings) Get() *TenantLoginSettings {
	return v.value
}

func (v *NullableTenantLoginSettings) Set(val *TenantLoginSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantLoginSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantLoginSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantLoginSettings(val *TenantLoginSettings) *NullableTenantLoginSettings {
	return &NullableTenantLoginSettings{value: val, isSet: true}
}

func (v NullableTenantLoginSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantLoginSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
