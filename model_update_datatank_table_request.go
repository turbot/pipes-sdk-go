/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// UpdateDatatankTableRequest struct for UpdateDatatankTableRequest
type UpdateDatatankTableRequest struct {
	Description  *string                 `json:"description,omitempty"`
	DesiredState *string                 `json:"desired_state,omitempty"`
	Frequency    *map[string]interface{} `json:"frequency,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	PartPer      *string                 `json:"part_per,omitempty"`
	SourceQuery  *string                 `json:"source_query,omitempty"`
	SourceSchema *string                 `json:"source_schema,omitempty"`
	SourceTable  *string                 `json:"source_table,omitempty"`
}

// NewUpdateDatatankTableRequest instantiates a new UpdateDatatankTableRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDatatankTableRequest() *UpdateDatatankTableRequest {
	this := UpdateDatatankTableRequest{}
	return &this
}

// NewUpdateDatatankTableRequestWithDefaults instantiates a new UpdateDatatankTableRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDatatankTableRequestWithDefaults() *UpdateDatatankTableRequest {
	this := UpdateDatatankTableRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateDatatankTableRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatatankTableRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateDatatankTableRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateDatatankTableRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDesiredState returns the DesiredState field value if set, zero value otherwise.
func (o *UpdateDatatankTableRequest) GetDesiredState() string {
	if o == nil || o.DesiredState == nil {
		var ret string
		return ret
	}
	return *o.DesiredState
}

// GetDesiredStateOk returns a tuple with the DesiredState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatatankTableRequest) GetDesiredStateOk() (*string, bool) {
	if o == nil || o.DesiredState == nil {
		return nil, false
	}
	return o.DesiredState, true
}

// HasDesiredState returns a boolean if a field has been set.
func (o *UpdateDatatankTableRequest) HasDesiredState() bool {
	if o != nil && o.DesiredState != nil {
		return true
	}

	return false
}

// SetDesiredState gets a reference to the given string and assigns it to the DesiredState field.
func (o *UpdateDatatankTableRequest) SetDesiredState(v string) {
	o.DesiredState = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *UpdateDatatankTableRequest) GetFrequency() map[string]interface{} {
	if o == nil || o.Frequency == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatatankTableRequest) GetFrequencyOk() (*map[string]interface{}, bool) {
	if o == nil || o.Frequency == nil {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *UpdateDatatankTableRequest) HasFrequency() bool {
	if o != nil && o.Frequency != nil {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given map[string]interface{} and assigns it to the Frequency field.
func (o *UpdateDatatankTableRequest) SetFrequency(v map[string]interface{}) {
	o.Frequency = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateDatatankTableRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatatankTableRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateDatatankTableRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateDatatankTableRequest) SetName(v string) {
	o.Name = &v
}

// GetPartPer returns the PartPer field value if set, zero value otherwise.
func (o *UpdateDatatankTableRequest) GetPartPer() string {
	if o == nil || o.PartPer == nil {
		var ret string
		return ret
	}
	return *o.PartPer
}

// GetPartPerOk returns a tuple with the PartPer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatatankTableRequest) GetPartPerOk() (*string, bool) {
	if o == nil || o.PartPer == nil {
		return nil, false
	}
	return o.PartPer, true
}

// HasPartPer returns a boolean if a field has been set.
func (o *UpdateDatatankTableRequest) HasPartPer() bool {
	if o != nil && o.PartPer != nil {
		return true
	}

	return false
}

// SetPartPer gets a reference to the given string and assigns it to the PartPer field.
func (o *UpdateDatatankTableRequest) SetPartPer(v string) {
	o.PartPer = &v
}

// GetSourceQuery returns the SourceQuery field value if set, zero value otherwise.
func (o *UpdateDatatankTableRequest) GetSourceQuery() string {
	if o == nil || o.SourceQuery == nil {
		var ret string
		return ret
	}
	return *o.SourceQuery
}

// GetSourceQueryOk returns a tuple with the SourceQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatatankTableRequest) GetSourceQueryOk() (*string, bool) {
	if o == nil || o.SourceQuery == nil {
		return nil, false
	}
	return o.SourceQuery, true
}

// HasSourceQuery returns a boolean if a field has been set.
func (o *UpdateDatatankTableRequest) HasSourceQuery() bool {
	if o != nil && o.SourceQuery != nil {
		return true
	}

	return false
}

// SetSourceQuery gets a reference to the given string and assigns it to the SourceQuery field.
func (o *UpdateDatatankTableRequest) SetSourceQuery(v string) {
	o.SourceQuery = &v
}

// GetSourceSchema returns the SourceSchema field value if set, zero value otherwise.
func (o *UpdateDatatankTableRequest) GetSourceSchema() string {
	if o == nil || o.SourceSchema == nil {
		var ret string
		return ret
	}
	return *o.SourceSchema
}

// GetSourceSchemaOk returns a tuple with the SourceSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatatankTableRequest) GetSourceSchemaOk() (*string, bool) {
	if o == nil || o.SourceSchema == nil {
		return nil, false
	}
	return o.SourceSchema, true
}

// HasSourceSchema returns a boolean if a field has been set.
func (o *UpdateDatatankTableRequest) HasSourceSchema() bool {
	if o != nil && o.SourceSchema != nil {
		return true
	}

	return false
}

// SetSourceSchema gets a reference to the given string and assigns it to the SourceSchema field.
func (o *UpdateDatatankTableRequest) SetSourceSchema(v string) {
	o.SourceSchema = &v
}

// GetSourceTable returns the SourceTable field value if set, zero value otherwise.
func (o *UpdateDatatankTableRequest) GetSourceTable() string {
	if o == nil || o.SourceTable == nil {
		var ret string
		return ret
	}
	return *o.SourceTable
}

// GetSourceTableOk returns a tuple with the SourceTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatatankTableRequest) GetSourceTableOk() (*string, bool) {
	if o == nil || o.SourceTable == nil {
		return nil, false
	}
	return o.SourceTable, true
}

// HasSourceTable returns a boolean if a field has been set.
func (o *UpdateDatatankTableRequest) HasSourceTable() bool {
	if o != nil && o.SourceTable != nil {
		return true
	}

	return false
}

// SetSourceTable gets a reference to the given string and assigns it to the SourceTable field.
func (o *UpdateDatatankTableRequest) SetSourceTable(v string) {
	o.SourceTable = &v
}

func (o UpdateDatatankTableRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DesiredState != nil {
		toSerialize["desired_state"] = o.DesiredState
	}
	if o.Frequency != nil {
		toSerialize["frequency"] = o.Frequency
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.PartPer != nil {
		toSerialize["part_per"] = o.PartPer
	}
	if o.SourceQuery != nil {
		toSerialize["source_query"] = o.SourceQuery
	}
	if o.SourceSchema != nil {
		toSerialize["source_schema"] = o.SourceSchema
	}
	if o.SourceTable != nil {
		toSerialize["source_table"] = o.SourceTable
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateDatatankTableRequest struct {
	value *UpdateDatatankTableRequest
	isSet bool
}

func (v NullableUpdateDatatankTableRequest) Get() *UpdateDatatankTableRequest {
	return v.value
}

func (v *NullableUpdateDatatankTableRequest) Set(val *UpdateDatatankTableRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDatatankTableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDatatankTableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDatatankTableRequest(val *UpdateDatatankTableRequest) *NullableUpdateDatatankTableRequest {
	return &NullableUpdateDatatankTableRequest{value: val, isSet: true}
}

func (v NullableUpdateDatatankTableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDatatankTableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
