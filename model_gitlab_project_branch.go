/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// GitlabProjectBranch struct for GitlabProjectBranch
type GitlabProjectBranch struct {
	Name      *string `json:"name,omitempty"`
	Protected *bool   `json:"protected,omitempty"`
}

// NewGitlabProjectBranch instantiates a new GitlabProjectBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitlabProjectBranch() *GitlabProjectBranch {
	this := GitlabProjectBranch{}
	return &this
}

// NewGitlabProjectBranchWithDefaults instantiates a new GitlabProjectBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitlabProjectBranchWithDefaults() *GitlabProjectBranch {
	this := GitlabProjectBranch{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GitlabProjectBranch) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabProjectBranch) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GitlabProjectBranch) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GitlabProjectBranch) SetName(v string) {
	o.Name = &v
}

// GetProtected returns the Protected field value if set, zero value otherwise.
func (o *GitlabProjectBranch) GetProtected() bool {
	if o == nil || o.Protected == nil {
		var ret bool
		return ret
	}
	return *o.Protected
}

// GetProtectedOk returns a tuple with the Protected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabProjectBranch) GetProtectedOk() (*bool, bool) {
	if o == nil || o.Protected == nil {
		return nil, false
	}
	return o.Protected, true
}

// HasProtected returns a boolean if a field has been set.
func (o *GitlabProjectBranch) HasProtected() bool {
	if o != nil && o.Protected != nil {
		return true
	}

	return false
}

// SetProtected gets a reference to the given bool and assigns it to the Protected field.
func (o *GitlabProjectBranch) SetProtected(v bool) {
	o.Protected = &v
}

func (o GitlabProjectBranch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Protected != nil {
		toSerialize["protected"] = o.Protected
	}
	return json.Marshal(toSerialize)
}

type NullableGitlabProjectBranch struct {
	value *GitlabProjectBranch
	isSet bool
}

func (v NullableGitlabProjectBranch) Get() *GitlabProjectBranch {
	return v.value
}

func (v *NullableGitlabProjectBranch) Set(val *GitlabProjectBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableGitlabProjectBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableGitlabProjectBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitlabProjectBranch(val *GitlabProjectBranch) *NullableGitlabProjectBranch {
	return &NullableGitlabProjectBranch{value: val, isSet: true}
}

func (v NullableGitlabProjectBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitlabProjectBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
