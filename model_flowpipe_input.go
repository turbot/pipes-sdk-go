/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// FlowpipeInput struct for FlowpipeInput
type FlowpipeInput struct {
	// The time of creation in ISO 8601 UTC.
	CreatedAt string `json:"created_at"`
	// User information for the user who created this.
	CreatedBy *User `json:"created_by,omitempty"`
	// The ID of the user that created this.
	CreatedById string `json:"created_by_id"`
	// The time the item was deleted in ISO 8601 UTC.
	DeletedAt *string `json:"deleted_at,omitempty"`
	// User information for the user that performed the deletion.
	DeletedBy *User `json:"deleted_by,omitempty"`
	// The ID of the user that performed the deletion.
	DeletedById string `json:"deleted_by_id"`
	// The unique ID of the Flowpipe input.
	Id string `json:"id"`
	// The unique ID of the identity that owns the Flowpipe input.
	IdentityId *string `json:"identity_id,omitempty"`
	// The form data for the Flowpipe input.
	Inputs *map[string]interface{} `json:"inputs,omitempty"`
	// The message for the Flowpipe message step.
	Message *string `json:"message,omitempty"`
	// The details of the notifier this flowpipe input uses.
	Notifier *Notifier `json:"notifier,omitempty"`
	// The name of the Flowpipe notifier to use for this input.
	NotifierId *string `json:"notifier_id,omitempty"`
	// The overrides for the Flowpipe input notification targets.
	Overrides *map[string]interface{} `json:"overrides,omitempty"`
	// The details of the process associated with this flowpipe input.
	Process *SpProcess `json:"process,omitempty"`
	// The unique ID of the Pipes process for the Flowpipe run that owns this input.
	ProcessId *string `json:"process_id,omitempty"`
	// The Flowpipe execution ID for this Flowpipe input.
	RandomId *string `json:"random_id,omitempty"`
	// The state of the Flowpipe input.
	State *FlowpipeInputState `json:"state,omitempty"`
	// The reason for the state of the Flowpipe input.
	StateReason *string `json:"state_reason,omitempty"`
	// The Flowpipe step execution ID for this Flowpipe input.
	StepExecutionId *string `json:"step_execution_id,omitempty"`
	// The type of step for the Flowpipe step input/message.
	StepType *FlowpipeInputStepType `json:"step_type,omitempty"`
	// The unique ID of the tenant that owns the Flowpipe input.
	TenantId string `json:"tenant_id"`
	// The time of the last update in ISO 8601 UTC.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// User information for the last user to update this.
	UpdatedBy *User `json:"updated_by,omitempty"`
	// The ID of the user that performed the last update.
	UpdatedById string `json:"updated_by_id"`
	// The version ID of this item. Pass this version ID via an If-Match header when performing mutation operations on the item.
	VersionId int32 `json:"version_id"`
	// The unique ID of the workspace that owns the Flowpipe input.
	WorkspaceId *string `json:"workspace_id,omitempty"`
}

// NewFlowpipeInput instantiates a new FlowpipeInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowpipeInput(createdAt string, createdById string, deletedById string, id string, tenantId string, updatedById string, versionId int32) *FlowpipeInput {
	this := FlowpipeInput{}
	this.CreatedAt = createdAt
	this.CreatedById = createdById
	this.DeletedById = deletedById
	this.Id = id
	this.TenantId = tenantId
	this.UpdatedById = updatedById
	this.VersionId = versionId
	return &this
}

// NewFlowpipeInputWithDefaults instantiates a new FlowpipeInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowpipeInputWithDefaults() *FlowpipeInput {
	this := FlowpipeInput{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *FlowpipeInput) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *FlowpipeInput) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *FlowpipeInput) GetCreatedBy() User {
	if o == nil || o.CreatedBy == nil {
		var ret User
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetCreatedByOk() (*User, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *FlowpipeInput) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given User and assigns it to the CreatedBy field.
func (o *FlowpipeInput) SetCreatedBy(v User) {
	o.CreatedBy = &v
}

// GetCreatedById returns the CreatedById field value
func (o *FlowpipeInput) GetCreatedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetCreatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedById, true
}

// SetCreatedById sets field value
func (o *FlowpipeInput) SetCreatedById(v string) {
	o.CreatedById = v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *FlowpipeInput) GetDeletedAt() string {
	if o == nil || o.DeletedAt == nil {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetDeletedAtOk() (*string, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *FlowpipeInput) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *FlowpipeInput) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *FlowpipeInput) GetDeletedBy() User {
	if o == nil || o.DeletedBy == nil {
		var ret User
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetDeletedByOk() (*User, bool) {
	if o == nil || o.DeletedBy == nil {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *FlowpipeInput) HasDeletedBy() bool {
	if o != nil && o.DeletedBy != nil {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given User and assigns it to the DeletedBy field.
func (o *FlowpipeInput) SetDeletedBy(v User) {
	o.DeletedBy = &v
}

// GetDeletedById returns the DeletedById field value
func (o *FlowpipeInput) GetDeletedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeletedById
}

// GetDeletedByIdOk returns a tuple with the DeletedById field value
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetDeletedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeletedById, true
}

// SetDeletedById sets field value
func (o *FlowpipeInput) SetDeletedById(v string) {
	o.DeletedById = v
}

// GetId returns the Id field value
func (o *FlowpipeInput) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FlowpipeInput) SetId(v string) {
	o.Id = v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *FlowpipeInput) GetIdentityId() string {
	if o == nil || o.IdentityId == nil {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetIdentityIdOk() (*string, bool) {
	if o == nil || o.IdentityId == nil {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *FlowpipeInput) HasIdentityId() bool {
	if o != nil && o.IdentityId != nil {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *FlowpipeInput) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *FlowpipeInput) GetInputs() map[string]interface{} {
	if o == nil || o.Inputs == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetInputsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Inputs == nil {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *FlowpipeInput) HasInputs() bool {
	if o != nil && o.Inputs != nil {
		return true
	}

	return false
}

// SetInputs gets a reference to the given map[string]interface{} and assigns it to the Inputs field.
func (o *FlowpipeInput) SetInputs(v map[string]interface{}) {
	o.Inputs = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *FlowpipeInput) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *FlowpipeInput) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *FlowpipeInput) SetMessage(v string) {
	o.Message = &v
}

// GetNotifier returns the Notifier field value if set, zero value otherwise.
func (o *FlowpipeInput) GetNotifier() Notifier {
	if o == nil || o.Notifier == nil {
		var ret Notifier
		return ret
	}
	return *o.Notifier
}

// GetNotifierOk returns a tuple with the Notifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetNotifierOk() (*Notifier, bool) {
	if o == nil || o.Notifier == nil {
		return nil, false
	}
	return o.Notifier, true
}

// HasNotifier returns a boolean if a field has been set.
func (o *FlowpipeInput) HasNotifier() bool {
	if o != nil && o.Notifier != nil {
		return true
	}

	return false
}

// SetNotifier gets a reference to the given Notifier and assigns it to the Notifier field.
func (o *FlowpipeInput) SetNotifier(v Notifier) {
	o.Notifier = &v
}

// GetNotifierId returns the NotifierId field value if set, zero value otherwise.
func (o *FlowpipeInput) GetNotifierId() string {
	if o == nil || o.NotifierId == nil {
		var ret string
		return ret
	}
	return *o.NotifierId
}

// GetNotifierIdOk returns a tuple with the NotifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetNotifierIdOk() (*string, bool) {
	if o == nil || o.NotifierId == nil {
		return nil, false
	}
	return o.NotifierId, true
}

// HasNotifierId returns a boolean if a field has been set.
func (o *FlowpipeInput) HasNotifierId() bool {
	if o != nil && o.NotifierId != nil {
		return true
	}

	return false
}

// SetNotifierId gets a reference to the given string and assigns it to the NotifierId field.
func (o *FlowpipeInput) SetNotifierId(v string) {
	o.NotifierId = &v
}

// GetOverrides returns the Overrides field value if set, zero value otherwise.
func (o *FlowpipeInput) GetOverrides() map[string]interface{} {
	if o == nil || o.Overrides == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Overrides
}

// GetOverridesOk returns a tuple with the Overrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetOverridesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Overrides == nil {
		return nil, false
	}
	return o.Overrides, true
}

// HasOverrides returns a boolean if a field has been set.
func (o *FlowpipeInput) HasOverrides() bool {
	if o != nil && o.Overrides != nil {
		return true
	}

	return false
}

// SetOverrides gets a reference to the given map[string]interface{} and assigns it to the Overrides field.
func (o *FlowpipeInput) SetOverrides(v map[string]interface{}) {
	o.Overrides = &v
}

// GetProcess returns the Process field value if set, zero value otherwise.
func (o *FlowpipeInput) GetProcess() SpProcess {
	if o == nil || o.Process == nil {
		var ret SpProcess
		return ret
	}
	return *o.Process
}

// GetProcessOk returns a tuple with the Process field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetProcessOk() (*SpProcess, bool) {
	if o == nil || o.Process == nil {
		return nil, false
	}
	return o.Process, true
}

// HasProcess returns a boolean if a field has been set.
func (o *FlowpipeInput) HasProcess() bool {
	if o != nil && o.Process != nil {
		return true
	}

	return false
}

// SetProcess gets a reference to the given SpProcess and assigns it to the Process field.
func (o *FlowpipeInput) SetProcess(v SpProcess) {
	o.Process = &v
}

// GetProcessId returns the ProcessId field value if set, zero value otherwise.
func (o *FlowpipeInput) GetProcessId() string {
	if o == nil || o.ProcessId == nil {
		var ret string
		return ret
	}
	return *o.ProcessId
}

// GetProcessIdOk returns a tuple with the ProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetProcessIdOk() (*string, bool) {
	if o == nil || o.ProcessId == nil {
		return nil, false
	}
	return o.ProcessId, true
}

// HasProcessId returns a boolean if a field has been set.
func (o *FlowpipeInput) HasProcessId() bool {
	if o != nil && o.ProcessId != nil {
		return true
	}

	return false
}

// SetProcessId gets a reference to the given string and assigns it to the ProcessId field.
func (o *FlowpipeInput) SetProcessId(v string) {
	o.ProcessId = &v
}

// GetRandomId returns the RandomId field value if set, zero value otherwise.
func (o *FlowpipeInput) GetRandomId() string {
	if o == nil || o.RandomId == nil {
		var ret string
		return ret
	}
	return *o.RandomId
}

// GetRandomIdOk returns a tuple with the RandomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetRandomIdOk() (*string, bool) {
	if o == nil || o.RandomId == nil {
		return nil, false
	}
	return o.RandomId, true
}

// HasRandomId returns a boolean if a field has been set.
func (o *FlowpipeInput) HasRandomId() bool {
	if o != nil && o.RandomId != nil {
		return true
	}

	return false
}

// SetRandomId gets a reference to the given string and assigns it to the RandomId field.
func (o *FlowpipeInput) SetRandomId(v string) {
	o.RandomId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FlowpipeInput) GetState() FlowpipeInputState {
	if o == nil || o.State == nil {
		var ret FlowpipeInputState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetStateOk() (*FlowpipeInputState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FlowpipeInput) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given FlowpipeInputState and assigns it to the State field.
func (o *FlowpipeInput) SetState(v FlowpipeInputState) {
	o.State = &v
}

// GetStateReason returns the StateReason field value if set, zero value otherwise.
func (o *FlowpipeInput) GetStateReason() string {
	if o == nil || o.StateReason == nil {
		var ret string
		return ret
	}
	return *o.StateReason
}

// GetStateReasonOk returns a tuple with the StateReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetStateReasonOk() (*string, bool) {
	if o == nil || o.StateReason == nil {
		return nil, false
	}
	return o.StateReason, true
}

// HasStateReason returns a boolean if a field has been set.
func (o *FlowpipeInput) HasStateReason() bool {
	if o != nil && o.StateReason != nil {
		return true
	}

	return false
}

// SetStateReason gets a reference to the given string and assigns it to the StateReason field.
func (o *FlowpipeInput) SetStateReason(v string) {
	o.StateReason = &v
}

// GetStepExecutionId returns the StepExecutionId field value if set, zero value otherwise.
func (o *FlowpipeInput) GetStepExecutionId() string {
	if o == nil || o.StepExecutionId == nil {
		var ret string
		return ret
	}
	return *o.StepExecutionId
}

// GetStepExecutionIdOk returns a tuple with the StepExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetStepExecutionIdOk() (*string, bool) {
	if o == nil || o.StepExecutionId == nil {
		return nil, false
	}
	return o.StepExecutionId, true
}

// HasStepExecutionId returns a boolean if a field has been set.
func (o *FlowpipeInput) HasStepExecutionId() bool {
	if o != nil && o.StepExecutionId != nil {
		return true
	}

	return false
}

// SetStepExecutionId gets a reference to the given string and assigns it to the StepExecutionId field.
func (o *FlowpipeInput) SetStepExecutionId(v string) {
	o.StepExecutionId = &v
}

// GetStepType returns the StepType field value if set, zero value otherwise.
func (o *FlowpipeInput) GetStepType() FlowpipeInputStepType {
	if o == nil || o.StepType == nil {
		var ret FlowpipeInputStepType
		return ret
	}
	return *o.StepType
}

// GetStepTypeOk returns a tuple with the StepType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetStepTypeOk() (*FlowpipeInputStepType, bool) {
	if o == nil || o.StepType == nil {
		return nil, false
	}
	return o.StepType, true
}

// HasStepType returns a boolean if a field has been set.
func (o *FlowpipeInput) HasStepType() bool {
	if o != nil && o.StepType != nil {
		return true
	}

	return false
}

// SetStepType gets a reference to the given FlowpipeInputStepType and assigns it to the StepType field.
func (o *FlowpipeInput) SetStepType(v FlowpipeInputStepType) {
	o.StepType = &v
}

// GetTenantId returns the TenantId field value
func (o *FlowpipeInput) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *FlowpipeInput) SetTenantId(v string) {
	o.TenantId = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *FlowpipeInput) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *FlowpipeInput) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *FlowpipeInput) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *FlowpipeInput) GetUpdatedBy() User {
	if o == nil || o.UpdatedBy == nil {
		var ret User
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetUpdatedByOk() (*User, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *FlowpipeInput) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given User and assigns it to the UpdatedBy field.
func (o *FlowpipeInput) SetUpdatedBy(v User) {
	o.UpdatedBy = &v
}

// GetUpdatedById returns the UpdatedById field value
func (o *FlowpipeInput) GetUpdatedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedById
}

// GetUpdatedByIdOk returns a tuple with the UpdatedById field value
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetUpdatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedById, true
}

// SetUpdatedById sets field value
func (o *FlowpipeInput) SetUpdatedById(v string) {
	o.UpdatedById = v
}

// GetVersionId returns the VersionId field value
func (o *FlowpipeInput) GetVersionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetVersionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionId, true
}

// SetVersionId sets field value
func (o *FlowpipeInput) SetVersionId(v int32) {
	o.VersionId = v
}

// GetWorkspaceId returns the WorkspaceId field value if set, zero value otherwise.
func (o *FlowpipeInput) GetWorkspaceId() string {
	if o == nil || o.WorkspaceId == nil {
		var ret string
		return ret
	}
	return *o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowpipeInput) GetWorkspaceIdOk() (*string, bool) {
	if o == nil || o.WorkspaceId == nil {
		return nil, false
	}
	return o.WorkspaceId, true
}

// HasWorkspaceId returns a boolean if a field has been set.
func (o *FlowpipeInput) HasWorkspaceId() bool {
	if o != nil && o.WorkspaceId != nil {
		return true
	}

	return false
}

// SetWorkspaceId gets a reference to the given string and assigns it to the WorkspaceId field.
func (o *FlowpipeInput) SetWorkspaceId(v string) {
	o.WorkspaceId = &v
}

func (o FlowpipeInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["created_by"] = o.CreatedBy
	}
	if true {
		toSerialize["created_by_id"] = o.CreatedById
	}
	if o.DeletedAt != nil {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if o.DeletedBy != nil {
		toSerialize["deleted_by"] = o.DeletedBy
	}
	if true {
		toSerialize["deleted_by_id"] = o.DeletedById
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.IdentityId != nil {
		toSerialize["identity_id"] = o.IdentityId
	}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Notifier != nil {
		toSerialize["notifier"] = o.Notifier
	}
	if o.NotifierId != nil {
		toSerialize["notifier_id"] = o.NotifierId
	}
	if o.Overrides != nil {
		toSerialize["overrides"] = o.Overrides
	}
	if o.Process != nil {
		toSerialize["process"] = o.Process
	}
	if o.ProcessId != nil {
		toSerialize["process_id"] = o.ProcessId
	}
	if o.RandomId != nil {
		toSerialize["random_id"] = o.RandomId
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.StateReason != nil {
		toSerialize["state_reason"] = o.StateReason
	}
	if o.StepExecutionId != nil {
		toSerialize["step_execution_id"] = o.StepExecutionId
	}
	if o.StepType != nil {
		toSerialize["step_type"] = o.StepType
	}
	if true {
		toSerialize["tenant_id"] = o.TenantId
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	if true {
		toSerialize["updated_by_id"] = o.UpdatedById
	}
	if true {
		toSerialize["version_id"] = o.VersionId
	}
	if o.WorkspaceId != nil {
		toSerialize["workspace_id"] = o.WorkspaceId
	}
	return json.Marshal(toSerialize)
}

type NullableFlowpipeInput struct {
	value *FlowpipeInput
	isSet bool
}

func (v NullableFlowpipeInput) Get() *FlowpipeInput {
	return v.value
}

func (v *NullableFlowpipeInput) Set(val *FlowpipeInput) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowpipeInput) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowpipeInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowpipeInput(val *FlowpipeInput) *NullableFlowpipeInput {
	return &NullableFlowpipeInput{value: val, isSet: true}
}

func (v NullableFlowpipeInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowpipeInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
