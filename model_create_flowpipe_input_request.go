/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// CreateFlowpipeInputRequest struct for CreateFlowpipeInputRequest
type CreateFlowpipeInputRequest struct {
	ExecutionId         string                  `json:"execution_id"`
	Inputs              *map[string]interface{} `json:"inputs,omitempty"`
	Message             *string                 `json:"message,omitempty"`
	NotifierName        string                  `json:"notifier_name"`
	PipelineExecutionId *string                 `json:"pipeline_execution_id,omitempty"`
	StepExecutionId     string                  `json:"step_execution_id"`
	StepType            FlowpipeInputStepType   `json:"step_type"`
}

// NewCreateFlowpipeInputRequest instantiates a new CreateFlowpipeInputRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFlowpipeInputRequest(executionId string, notifierName string, stepExecutionId string, stepType FlowpipeInputStepType) *CreateFlowpipeInputRequest {
	this := CreateFlowpipeInputRequest{}
	this.ExecutionId = executionId
	this.NotifierName = notifierName
	this.StepExecutionId = stepExecutionId
	this.StepType = stepType
	return &this
}

// NewCreateFlowpipeInputRequestWithDefaults instantiates a new CreateFlowpipeInputRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFlowpipeInputRequestWithDefaults() *CreateFlowpipeInputRequest {
	this := CreateFlowpipeInputRequest{}
	return &this
}

// GetExecutionId returns the ExecutionId field value
func (o *CreateFlowpipeInputRequest) GetExecutionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value
// and a boolean to check if the value has been set.
func (o *CreateFlowpipeInputRequest) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutionId, true
}

// SetExecutionId sets field value
func (o *CreateFlowpipeInputRequest) SetExecutionId(v string) {
	o.ExecutionId = v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *CreateFlowpipeInputRequest) GetInputs() map[string]interface{} {
	if o == nil || o.Inputs == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFlowpipeInputRequest) GetInputsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Inputs == nil {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *CreateFlowpipeInputRequest) HasInputs() bool {
	if o != nil && o.Inputs != nil {
		return true
	}

	return false
}

// SetInputs gets a reference to the given map[string]interface{} and assigns it to the Inputs field.
func (o *CreateFlowpipeInputRequest) SetInputs(v map[string]interface{}) {
	o.Inputs = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CreateFlowpipeInputRequest) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFlowpipeInputRequest) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CreateFlowpipeInputRequest) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CreateFlowpipeInputRequest) SetMessage(v string) {
	o.Message = &v
}

// GetNotifierName returns the NotifierName field value
func (o *CreateFlowpipeInputRequest) GetNotifierName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifierName
}

// GetNotifierNameOk returns a tuple with the NotifierName field value
// and a boolean to check if the value has been set.
func (o *CreateFlowpipeInputRequest) GetNotifierNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifierName, true
}

// SetNotifierName sets field value
func (o *CreateFlowpipeInputRequest) SetNotifierName(v string) {
	o.NotifierName = v
}

// GetPipelineExecutionId returns the PipelineExecutionId field value if set, zero value otherwise.
func (o *CreateFlowpipeInputRequest) GetPipelineExecutionId() string {
	if o == nil || o.PipelineExecutionId == nil {
		var ret string
		return ret
	}
	return *o.PipelineExecutionId
}

// GetPipelineExecutionIdOk returns a tuple with the PipelineExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFlowpipeInputRequest) GetPipelineExecutionIdOk() (*string, bool) {
	if o == nil || o.PipelineExecutionId == nil {
		return nil, false
	}
	return o.PipelineExecutionId, true
}

// HasPipelineExecutionId returns a boolean if a field has been set.
func (o *CreateFlowpipeInputRequest) HasPipelineExecutionId() bool {
	if o != nil && o.PipelineExecutionId != nil {
		return true
	}

	return false
}

// SetPipelineExecutionId gets a reference to the given string and assigns it to the PipelineExecutionId field.
func (o *CreateFlowpipeInputRequest) SetPipelineExecutionId(v string) {
	o.PipelineExecutionId = &v
}

// GetStepExecutionId returns the StepExecutionId field value
func (o *CreateFlowpipeInputRequest) GetStepExecutionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StepExecutionId
}

// GetStepExecutionIdOk returns a tuple with the StepExecutionId field value
// and a boolean to check if the value has been set.
func (o *CreateFlowpipeInputRequest) GetStepExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepExecutionId, true
}

// SetStepExecutionId sets field value
func (o *CreateFlowpipeInputRequest) SetStepExecutionId(v string) {
	o.StepExecutionId = v
}

// GetStepType returns the StepType field value
func (o *CreateFlowpipeInputRequest) GetStepType() FlowpipeInputStepType {
	if o == nil {
		var ret FlowpipeInputStepType
		return ret
	}

	return o.StepType
}

// GetStepTypeOk returns a tuple with the StepType field value
// and a boolean to check if the value has been set.
func (o *CreateFlowpipeInputRequest) GetStepTypeOk() (*FlowpipeInputStepType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepType, true
}

// SetStepType sets field value
func (o *CreateFlowpipeInputRequest) SetStepType(v FlowpipeInputStepType) {
	o.StepType = v
}

func (o CreateFlowpipeInputRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["execution_id"] = o.ExecutionId
	}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["notifier_name"] = o.NotifierName
	}
	if o.PipelineExecutionId != nil {
		toSerialize["pipeline_execution_id"] = o.PipelineExecutionId
	}
	if true {
		toSerialize["step_execution_id"] = o.StepExecutionId
	}
	if true {
		toSerialize["step_type"] = o.StepType
	}
	return json.Marshal(toSerialize)
}

type NullableCreateFlowpipeInputRequest struct {
	value *CreateFlowpipeInputRequest
	isSet bool
}

func (v NullableCreateFlowpipeInputRequest) Get() *CreateFlowpipeInputRequest {
	return v.value
}

func (v *NullableCreateFlowpipeInputRequest) Set(val *CreateFlowpipeInputRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFlowpipeInputRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFlowpipeInputRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFlowpipeInputRequest(val *CreateFlowpipeInputRequest) *NullableCreateFlowpipeInputRequest {
	return &NullableCreateFlowpipeInputRequest{value: val, isSet: true}
}

func (v NullableCreateFlowpipeInputRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFlowpipeInputRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
