/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// FlowpipeInputState the model 'FlowpipeInputState'
type FlowpipeInputState string

// List of FlowpipeInputState
const (
	FlowpipeInputStatePending  FlowpipeInputState = "pending"
	FlowpipeInputStateStarted  FlowpipeInputState = "started"
	FlowpipeInputStateFinished FlowpipeInputState = "finished"
	FlowpipeInputStateError    FlowpipeInputState = "error"
)

// All allowed values of FlowpipeInputState enum
var AllowedFlowpipeInputStateEnumValues = []FlowpipeInputState{
	"pending",
	"started",
	"finished",
	"error",
}

func (v *FlowpipeInputState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowpipeInputState(value)
	for _, existing := range AllowedFlowpipeInputStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowpipeInputState", value)
}

// NewFlowpipeInputStateFromValue returns a pointer to a valid FlowpipeInputState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowpipeInputStateFromValue(v string) (*FlowpipeInputState, error) {
	ev := FlowpipeInputState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowpipeInputState: valid values are %v", v, AllowedFlowpipeInputStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowpipeInputState) IsValid() bool {
	for _, existing := range AllowedFlowpipeInputStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowpipeInputState value
func (v FlowpipeInputState) Ptr() *FlowpipeInputState {
	return &v
}

type NullableFlowpipeInputState struct {
	value *FlowpipeInputState
	isSet bool
}

func (v NullableFlowpipeInputState) Get() *FlowpipeInputState {
	return v.value
}

func (v *NullableFlowpipeInputState) Set(val *FlowpipeInputState) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowpipeInputState) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowpipeInputState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowpipeInputState(val *FlowpipeInputState) *NullableFlowpipeInputState {
	return &NullableFlowpipeInputState{value: val, isSet: true}
}

func (v NullableFlowpipeInputState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowpipeInputState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
