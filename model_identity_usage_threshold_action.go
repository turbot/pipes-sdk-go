/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// IdentityUsageThresholdAction the model 'IdentityUsageThresholdAction'
type IdentityUsageThresholdAction string

// List of IdentityUsageThresholdAction
const (
	IdentityUsageThresholdActionWarn       IdentityUsageThresholdAction = "warn"
	IdentityUsageThresholdActionCapAndWarn IdentityUsageThresholdAction = "cap_and_warn"
)

// All allowed values of IdentityUsageThresholdAction enum
var AllowedIdentityUsageThresholdActionEnumValues = []IdentityUsageThresholdAction{
	"warn",
	"cap_and_warn",
}

func (v *IdentityUsageThresholdAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityUsageThresholdAction(value)
	for _, existing := range AllowedIdentityUsageThresholdActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityUsageThresholdAction", value)
}

// NewIdentityUsageThresholdActionFromValue returns a pointer to a valid IdentityUsageThresholdAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityUsageThresholdActionFromValue(v string) (*IdentityUsageThresholdAction, error) {
	ev := IdentityUsageThresholdAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityUsageThresholdAction: valid values are %v", v, AllowedIdentityUsageThresholdActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityUsageThresholdAction) IsValid() bool {
	for _, existing := range AllowedIdentityUsageThresholdActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityUsageThresholdAction value
func (v IdentityUsageThresholdAction) Ptr() *IdentityUsageThresholdAction {
	return &v
}

type NullableIdentityUsageThresholdAction struct {
	value *IdentityUsageThresholdAction
	isSet bool
}

func (v NullableIdentityUsageThresholdAction) Get() *IdentityUsageThresholdAction {
	return v.value
}

func (v *NullableIdentityUsageThresholdAction) Set(val *IdentityUsageThresholdAction) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityUsageThresholdAction) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityUsageThresholdAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityUsageThresholdAction(val *IdentityUsageThresholdAction) *NullableIdentityUsageThresholdAction {
	return &NullableIdentityUsageThresholdAction{value: val, isSet: true}
}

func (v NullableIdentityUsageThresholdAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityUsageThresholdAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
