/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// CreateIntegrationRequest struct for CreateIntegrationRequest
type CreateIntegrationRequest struct {
	// The configuration for the integration.
	Config *map[string]interface{} `json:"config,omitempty"`
	// The handle for the integration.
	Handle string `json:"handle"`
	// The type of the integration, can be one of `aws`, `azure`, `gcp` or `github`.
	Type IntegrationType `json:"type"`
}

// NewCreateIntegrationRequest instantiates a new CreateIntegrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIntegrationRequest(handle string, type_ IntegrationType) *CreateIntegrationRequest {
	this := CreateIntegrationRequest{}
	this.Handle = handle
	this.Type = type_
	return &this
}

// NewCreateIntegrationRequestWithDefaults instantiates a new CreateIntegrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIntegrationRequestWithDefaults() *CreateIntegrationRequest {
	this := CreateIntegrationRequest{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetConfig() map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetConfigOk() (*map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *CreateIntegrationRequest) SetConfig(v map[string]interface{}) {
	o.Config = &v
}

// GetHandle returns the Handle field value
func (o *CreateIntegrationRequest) GetHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handle, true
}

// SetHandle sets field value
func (o *CreateIntegrationRequest) SetHandle(v string) {
	o.Handle = v
}

// GetType returns the Type field value
func (o *CreateIntegrationRequest) GetType() IntegrationType {
	if o == nil {
		var ret IntegrationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetTypeOk() (*IntegrationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateIntegrationRequest) SetType(v IntegrationType) {
	o.Type = v
}

func (o CreateIntegrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if true {
		toSerialize["handle"] = o.Handle
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableCreateIntegrationRequest struct {
	value *CreateIntegrationRequest
	isSet bool
}

func (v NullableCreateIntegrationRequest) Get() *CreateIntegrationRequest {
	return v.value
}

func (v *NullableCreateIntegrationRequest) Set(val *CreateIntegrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIntegrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIntegrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIntegrationRequest(val *CreateIntegrationRequest) *NullableCreateIntegrationRequest {
	return &NullableCreateIntegrationRequest{value: val, isSet: true}
}

func (v NullableCreateIntegrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIntegrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
