/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// TriggerCommandRequest struct for TriggerCommandRequest
type TriggerCommandRequest struct {
	Args    *map[string]interface{} `json:"args,omitempty"`
	Command TriggerCommandAction    `json:"command"`
}

// NewTriggerCommandRequest instantiates a new TriggerCommandRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerCommandRequest(command TriggerCommandAction) *TriggerCommandRequest {
	this := TriggerCommandRequest{}
	this.Command = command
	return &this
}

// NewTriggerCommandRequestWithDefaults instantiates a new TriggerCommandRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerCommandRequestWithDefaults() *TriggerCommandRequest {
	this := TriggerCommandRequest{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *TriggerCommandRequest) GetArgs() map[string]interface{} {
	if o == nil || o.Args == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerCommandRequest) GetArgsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Args == nil {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *TriggerCommandRequest) HasArgs() bool {
	if o != nil && o.Args != nil {
		return true
	}

	return false
}

// SetArgs gets a reference to the given map[string]interface{} and assigns it to the Args field.
func (o *TriggerCommandRequest) SetArgs(v map[string]interface{}) {
	o.Args = &v
}

// GetCommand returns the Command field value
func (o *TriggerCommandRequest) GetCommand() TriggerCommandAction {
	if o == nil {
		var ret TriggerCommandAction
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *TriggerCommandRequest) GetCommandOk() (*TriggerCommandAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *TriggerCommandRequest) SetCommand(v TriggerCommandAction) {
	o.Command = v
}

func (o TriggerCommandRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	if true {
		toSerialize["command"] = o.Command
	}
	return json.Marshal(toSerialize)
}

type NullableTriggerCommandRequest struct {
	value *TriggerCommandRequest
	isSet bool
}

func (v NullableTriggerCommandRequest) Get() *TriggerCommandRequest {
	return v.value
}

func (v *NullableTriggerCommandRequest) Set(val *TriggerCommandRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerCommandRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerCommandRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerCommandRequest(val *TriggerCommandRequest) *NullableTriggerCommandRequest {
	return &NullableTriggerCommandRequest{value: val, isSet: true}
}

func (v NullableTriggerCommandRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerCommandRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
