/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// PaymentMethod struct for PaymentMethod
type PaymentMethod struct {
	Card          *Card          `json:"card,omitempty"`
	Default       *bool          `json:"default,omitempty"`
	Id            *string        `json:"id,omitempty"`
	Type          string         `json:"type"`
	UsBankAccount *USBankAccount `json:"us_bank_account,omitempty"`
}

// NewPaymentMethod instantiates a new PaymentMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethod(type_ string) *PaymentMethod {
	this := PaymentMethod{}
	this.Type = type_
	return &this
}

// NewPaymentMethodWithDefaults instantiates a new PaymentMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodWithDefaults() *PaymentMethod {
	this := PaymentMethod{}
	return &this
}

// GetCard returns the Card field value if set, zero value otherwise.
func (o *PaymentMethod) GetCard() Card {
	if o == nil || o.Card == nil {
		var ret Card
		return ret
	}
	return *o.Card
}

// GetCardOk returns a tuple with the Card field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetCardOk() (*Card, bool) {
	if o == nil || o.Card == nil {
		return nil, false
	}
	return o.Card, true
}

// HasCard returns a boolean if a field has been set.
func (o *PaymentMethod) HasCard() bool {
	if o != nil && o.Card != nil {
		return true
	}

	return false
}

// SetCard gets a reference to the given Card and assigns it to the Card field.
func (o *PaymentMethod) SetCard(v Card) {
	o.Card = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *PaymentMethod) GetDefault() bool {
	if o == nil || o.Default == nil {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetDefaultOk() (*bool, bool) {
	if o == nil || o.Default == nil {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *PaymentMethod) HasDefault() bool {
	if o != nil && o.Default != nil {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *PaymentMethod) SetDefault(v bool) {
	o.Default = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PaymentMethod) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PaymentMethod) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PaymentMethod) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *PaymentMethod) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PaymentMethod) SetType(v string) {
	o.Type = v
}

// GetUsBankAccount returns the UsBankAccount field value if set, zero value otherwise.
func (o *PaymentMethod) GetUsBankAccount() USBankAccount {
	if o == nil || o.UsBankAccount == nil {
		var ret USBankAccount
		return ret
	}
	return *o.UsBankAccount
}

// GetUsBankAccountOk returns a tuple with the UsBankAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetUsBankAccountOk() (*USBankAccount, bool) {
	if o == nil || o.UsBankAccount == nil {
		return nil, false
	}
	return o.UsBankAccount, true
}

// HasUsBankAccount returns a boolean if a field has been set.
func (o *PaymentMethod) HasUsBankAccount() bool {
	if o != nil && o.UsBankAccount != nil {
		return true
	}

	return false
}

// SetUsBankAccount gets a reference to the given USBankAccount and assigns it to the UsBankAccount field.
func (o *PaymentMethod) SetUsBankAccount(v USBankAccount) {
	o.UsBankAccount = &v
}

func (o PaymentMethod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Card != nil {
		toSerialize["card"] = o.Card
	}
	if o.Default != nil {
		toSerialize["default"] = o.Default
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.UsBankAccount != nil {
		toSerialize["us_bank_account"] = o.UsBankAccount
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentMethod struct {
	value *PaymentMethod
	isSet bool
}

func (v NullablePaymentMethod) Get() *PaymentMethod {
	return v.value
}

func (v *NullablePaymentMethod) Set(val *PaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethod(val *PaymentMethod) *NullablePaymentMethod {
	return &NullablePaymentMethod{value: val, isSet: true}
}

func (v NullablePaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
