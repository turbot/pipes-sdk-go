/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// TemporaryTokenRequestState the model 'TemporaryTokenRequestState'
type TemporaryTokenRequestState string

// List of TemporaryTokenRequestState
const (
	TemporaryTokenRequestStatePending   TemporaryTokenRequestState = "pending"
	TemporaryTokenRequestStateConfirmed TemporaryTokenRequestState = "confirmed"
)

// All allowed values of TemporaryTokenRequestState enum
var AllowedTemporaryTokenRequestStateEnumValues = []TemporaryTokenRequestState{
	"pending",
	"confirmed",
}

func (v *TemporaryTokenRequestState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TemporaryTokenRequestState(value)
	for _, existing := range AllowedTemporaryTokenRequestStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TemporaryTokenRequestState", value)
}

// NewTemporaryTokenRequestStateFromValue returns a pointer to a valid TemporaryTokenRequestState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTemporaryTokenRequestStateFromValue(v string) (*TemporaryTokenRequestState, error) {
	ev := TemporaryTokenRequestState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TemporaryTokenRequestState: valid values are %v", v, AllowedTemporaryTokenRequestStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TemporaryTokenRequestState) IsValid() bool {
	for _, existing := range AllowedTemporaryTokenRequestStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TemporaryTokenRequestState value
func (v TemporaryTokenRequestState) Ptr() *TemporaryTokenRequestState {
	return &v
}

type NullableTemporaryTokenRequestState struct {
	value *TemporaryTokenRequestState
	isSet bool
}

func (v NullableTemporaryTokenRequestState) Get() *TemporaryTokenRequestState {
	return v.value
}

func (v *NullableTemporaryTokenRequestState) Set(val *TemporaryTokenRequestState) {
	v.value = val
	v.isSet = true
}

func (v NullableTemporaryTokenRequestState) IsSet() bool {
	return v.isSet
}

func (v *NullableTemporaryTokenRequestState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemporaryTokenRequestState(val *TemporaryTokenRequestState) *NullableTemporaryTokenRequestState {
	return &NullableTemporaryTokenRequestState{value: val, isSet: true}
}

func (v NullableTemporaryTokenRequestState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemporaryTokenRequestState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
