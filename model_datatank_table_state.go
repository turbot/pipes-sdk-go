/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// DatatankTableState the model 'DatatankTableState'
type DatatankTableState string

// List of DatatankTableState
const (
	DatatankTableEnabled  DatatankTableState = "enabled"
	DatatankTablePaused   DatatankTableState = "paused"
	DatatankTableDisabled DatatankTableState = "disabled"
	DatatankTableDeleted  DatatankTableState = "deleted"
)

// All allowed values of DatatankTableState enum
var AllowedDatatankTableStateEnumValues = []DatatankTableState{
	"enabled",
	"paused",
	"disabled",
	"deleted",
}

func (v *DatatankTableState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatatankTableState(value)
	for _, existing := range AllowedDatatankTableStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatatankTableState", value)
}

// NewDatatankTableStateFromValue returns a pointer to a valid DatatankTableState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatatankTableStateFromValue(v string) (*DatatankTableState, error) {
	ev := DatatankTableState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatatankTableState: valid values are %v", v, AllowedDatatankTableStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatatankTableState) IsValid() bool {
	for _, existing := range AllowedDatatankTableStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatatankTableState value
func (v DatatankTableState) Ptr() *DatatankTableState {
	return &v
}

type NullableDatatankTableState struct {
	value *DatatankTableState
	isSet bool
}

func (v NullableDatatankTableState) Get() *DatatankTableState {
	return v.value
}

func (v *NullableDatatankTableState) Set(val *DatatankTableState) {
	v.value = val
	v.isSet = true
}

func (v NullableDatatankTableState) IsSet() bool {
	return v.isSet
}

func (v *NullableDatatankTableState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatatankTableState(val *DatatankTableState) *NullableDatatankTableState {
	return &NullableDatatankTableState{value: val, isSet: true}
}

func (v NullableDatatankTableState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatatankTableState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
