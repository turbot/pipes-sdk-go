/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// ModPipe the model 'ModPipe'
type ModPipe string

// List of ModPipe
const (
	ModPipeFlowpipe  ModPipe = "flowpipe"
	ModPipePowerpipe ModPipe = "powerpipe"
)

// All allowed values of ModPipe enum
var AllowedModPipeEnumValues = []ModPipe{
	"flowpipe",
	"powerpipe",
}

func (v *ModPipe) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModPipe(value)
	for _, existing := range AllowedModPipeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModPipe", value)
}

// NewModPipeFromValue returns a pointer to a valid ModPipe
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModPipeFromValue(v string) (*ModPipe, error) {
	ev := ModPipe(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModPipe: valid values are %v", v, AllowedModPipeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModPipe) IsValid() bool {
	for _, existing := range AllowedModPipeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModPipe value
func (v ModPipe) Ptr() *ModPipe {
	return &v
}

type NullableModPipe struct {
	value *ModPipe
	isSet bool
}

func (v NullableModPipe) Get() *ModPipe {
	return v.value
}

func (v *NullableModPipe) Set(val *ModPipe) {
	v.value = val
	v.isSet = true
}

func (v NullableModPipe) IsSet() bool {
	return v.isSet
}

func (v *NullableModPipe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModPipe(val *ModPipe) *NullableModPipe {
	return &NullableModPipe{value: val, isSet: true}
}

func (v NullableModPipe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModPipe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
