/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// NotifierPrecedence the model 'NotifierPrecedence'
type NotifierPrecedence string

// List of NotifierPrecedence
const (
	NotifierPrecedenceDefault NotifierPrecedence = "default"
)

// All allowed values of NotifierPrecedence enum
var AllowedNotifierPrecedenceEnumValues = []NotifierPrecedence{
	"default",
}

func (v *NotifierPrecedence) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotifierPrecedence(value)
	for _, existing := range AllowedNotifierPrecedenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotifierPrecedence", value)
}

// NewNotifierPrecedenceFromValue returns a pointer to a valid NotifierPrecedence
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotifierPrecedenceFromValue(v string) (*NotifierPrecedence, error) {
	ev := NotifierPrecedence(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotifierPrecedence: valid values are %v", v, AllowedNotifierPrecedenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotifierPrecedence) IsValid() bool {
	for _, existing := range AllowedNotifierPrecedenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotifierPrecedence value
func (v NotifierPrecedence) Ptr() *NotifierPrecedence {
	return &v
}

type NullableNotifierPrecedence struct {
	value *NotifierPrecedence
	isSet bool
}

func (v NullableNotifierPrecedence) Get() *NotifierPrecedence {
	return v.value
}

func (v *NullableNotifierPrecedence) Set(val *NotifierPrecedence) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifierPrecedence) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifierPrecedence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifierPrecedence(val *NotifierPrecedence) *NullableNotifierPrecedence {
	return &NullableNotifierPrecedence{value: val, isSet: true}
}

func (v NullableNotifierPrecedence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifierPrecedence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
