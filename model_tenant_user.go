/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// TenantUser struct for TenantUser
type TenantUser struct {
	// The time of creation in ISO 8601 UTC.
	CreatedAt string `json:"created_at"`
	// User information for the user who created this.
	CreatedBy *User `json:"created_by,omitempty"`
	// The ID of the user that created this.
	CreatedById string `json:"created_by_id"`
	// The email of the user.
	Email string `json:"email"`
	// The unique identifier of the tenant member.
	Id string `json:"id"`
	// The role of the tenant user.
	Role string `json:"role"`
	// The status of the tenant member i.e invited or accepted.
	Status string `json:"status"`
	// Readonly in DB
	Tenant *Tenant `json:"tenant,omitempty"`
	// The identifier of the tenant.
	TenantId string `json:"tenant_id"`
	// The time of the last update in ISO 8601 UTC.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// User information for the last user to update this.
	UpdatedBy *User `json:"updated_by,omitempty"`
	// The ID of the user that performed the last update.
	UpdatedById string `json:"updated_by_id"`
	// Readonly in DB
	User *User `json:"user,omitempty"`
	// The identifier of the user that belongs to the tenant.
	UserId string `json:"user_id"`
	// The version ID of this item. Pass this version ID via an If-Match header when performing mutation operations on the item.
	VersionId int32 `json:"version_id"`
}

// NewTenantUser instantiates a new TenantUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantUser(createdAt string, createdById string, email string, id string, role string, status string, tenantId string, updatedById string, userId string, versionId int32) *TenantUser {
	this := TenantUser{}
	this.CreatedAt = createdAt
	this.CreatedById = createdById
	this.Email = email
	this.Id = id
	this.Role = role
	this.Status = status
	this.TenantId = tenantId
	this.UpdatedById = updatedById
	this.UserId = userId
	this.VersionId = versionId
	return &this
}

// NewTenantUserWithDefaults instantiates a new TenantUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantUserWithDefaults() *TenantUser {
	this := TenantUser{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *TenantUser) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TenantUser) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *TenantUser) GetCreatedBy() User {
	if o == nil || o.CreatedBy == nil {
		var ret User
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantUser) GetCreatedByOk() (*User, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *TenantUser) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given User and assigns it to the CreatedBy field.
func (o *TenantUser) SetCreatedBy(v User) {
	o.CreatedBy = &v
}

// GetCreatedById returns the CreatedById field value
func (o *TenantUser) GetCreatedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetCreatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedById, true
}

// SetCreatedById sets field value
func (o *TenantUser) SetCreatedById(v string) {
	o.CreatedById = v
}

// GetEmail returns the Email field value
func (o *TenantUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *TenantUser) SetEmail(v string) {
	o.Email = v
}

// GetId returns the Id field value
func (o *TenantUser) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TenantUser) SetId(v string) {
	o.Id = v
}

// GetRole returns the Role field value
func (o *TenantUser) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *TenantUser) SetRole(v string) {
	o.Role = v
}

// GetStatus returns the Status field value
func (o *TenantUser) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TenantUser) SetStatus(v string) {
	o.Status = v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *TenantUser) GetTenant() Tenant {
	if o == nil || o.Tenant == nil {
		var ret Tenant
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantUser) GetTenantOk() (*Tenant, bool) {
	if o == nil || o.Tenant == nil {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *TenantUser) HasTenant() bool {
	if o != nil && o.Tenant != nil {
		return true
	}

	return false
}

// SetTenant gets a reference to the given Tenant and assigns it to the Tenant field.
func (o *TenantUser) SetTenant(v Tenant) {
	o.Tenant = &v
}

// GetTenantId returns the TenantId field value
func (o *TenantUser) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *TenantUser) SetTenantId(v string) {
	o.TenantId = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TenantUser) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantUser) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TenantUser) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *TenantUser) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *TenantUser) GetUpdatedBy() User {
	if o == nil || o.UpdatedBy == nil {
		var ret User
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantUser) GetUpdatedByOk() (*User, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *TenantUser) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given User and assigns it to the UpdatedBy field.
func (o *TenantUser) SetUpdatedBy(v User) {
	o.UpdatedBy = &v
}

// GetUpdatedById returns the UpdatedById field value
func (o *TenantUser) GetUpdatedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedById
}

// GetUpdatedByIdOk returns a tuple with the UpdatedById field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetUpdatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedById, true
}

// SetUpdatedById sets field value
func (o *TenantUser) SetUpdatedById(v string) {
	o.UpdatedById = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *TenantUser) GetUser() User {
	if o == nil || o.User == nil {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantUser) GetUserOk() (*User, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *TenantUser) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *TenantUser) SetUser(v User) {
	o.User = &v
}

// GetUserId returns the UserId field value
func (o *TenantUser) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *TenantUser) SetUserId(v string) {
	o.UserId = v
}

// GetVersionId returns the VersionId field value
func (o *TenantUser) GetVersionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetVersionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionId, true
}

// SetVersionId sets field value
func (o *TenantUser) SetVersionId(v int32) {
	o.VersionId = v
}

func (o TenantUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["created_by"] = o.CreatedBy
	}
	if true {
		toSerialize["created_by_id"] = o.CreatedById
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["role"] = o.Role
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Tenant != nil {
		toSerialize["tenant"] = o.Tenant
	}
	if true {
		toSerialize["tenant_id"] = o.TenantId
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	if true {
		toSerialize["updated_by_id"] = o.UpdatedById
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if true {
		toSerialize["user_id"] = o.UserId
	}
	if true {
		toSerialize["version_id"] = o.VersionId
	}
	return json.Marshal(toSerialize)
}

type NullableTenantUser struct {
	value *TenantUser
	isSet bool
}

func (v NullableTenantUser) Get() *TenantUser {
	return v.value
}

func (v *NullableTenantUser) Set(val *TenantUser) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantUser) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantUser(val *TenantUser) *NullableTenantUser {
	return &NullableTenantUser{value: val, isSet: true}
}

func (v NullableTenantUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
