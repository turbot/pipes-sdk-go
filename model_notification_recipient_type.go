/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// NotificationRecipientType the model 'NotificationRecipientType'
type NotificationRecipientType string

// List of NotificationRecipientType
const (
	RecipientTypeEmail NotificationRecipientType = "email"
	RecipientTypeSlack NotificationRecipientType = "slack"
)

// All allowed values of NotificationRecipientType enum
var AllowedNotificationRecipientTypeEnumValues = []NotificationRecipientType{
	"email",
	"slack",
}

func (v *NotificationRecipientType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationRecipientType(value)
	for _, existing := range AllowedNotificationRecipientTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationRecipientType", value)
}

// NewNotificationRecipientTypeFromValue returns a pointer to a valid NotificationRecipientType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationRecipientTypeFromValue(v string) (*NotificationRecipientType, error) {
	ev := NotificationRecipientType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationRecipientType: valid values are %v", v, AllowedNotificationRecipientTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationRecipientType) IsValid() bool {
	for _, existing := range AllowedNotificationRecipientTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificationRecipientType value
func (v NotificationRecipientType) Ptr() *NotificationRecipientType {
	return &v
}

type NullableNotificationRecipientType struct {
	value *NotificationRecipientType
	isSet bool
}

func (v NullableNotificationRecipientType) Get() *NotificationRecipientType {
	return v.value
}

func (v *NullableNotificationRecipientType) Set(val *NotificationRecipientType) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRecipientType) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRecipientType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRecipientType(val *NotificationRecipientType) *NullableNotificationRecipientType {
	return &NullableNotificationRecipientType{value: val, isSet: true}
}

func (v NullableNotificationRecipientType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRecipientType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
