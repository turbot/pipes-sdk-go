/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// UsageBillingModeType the model 'UsageBillingModeType'
type UsageBillingModeType string

// List of UsageBillingModeType
const (
	UsageBillingModeTypeBillable    UsageBillingModeType = "billable"
	UsageBillingModeTypeNonBillable UsageBillingModeType = "non_billable"
)

// All allowed values of UsageBillingModeType enum
var AllowedUsageBillingModeTypeEnumValues = []UsageBillingModeType{
	"billable",
	"non_billable",
}

func (v *UsageBillingModeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UsageBillingModeType(value)
	for _, existing := range AllowedUsageBillingModeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UsageBillingModeType", value)
}

// NewUsageBillingModeTypeFromValue returns a pointer to a valid UsageBillingModeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUsageBillingModeTypeFromValue(v string) (*UsageBillingModeType, error) {
	ev := UsageBillingModeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UsageBillingModeType: valid values are %v", v, AllowedUsageBillingModeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UsageBillingModeType) IsValid() bool {
	for _, existing := range AllowedUsageBillingModeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UsageBillingModeType value
func (v UsageBillingModeType) Ptr() *UsageBillingModeType {
	return &v
}

type NullableUsageBillingModeType struct {
	value *UsageBillingModeType
	isSet bool
}

func (v NullableUsageBillingModeType) Get() *UsageBillingModeType {
	return v.value
}

func (v *NullableUsageBillingModeType) Set(val *UsageBillingModeType) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageBillingModeType) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageBillingModeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageBillingModeType(val *UsageBillingModeType) *NullableUsageBillingModeType {
	return &NullableUsageBillingModeType{value: val, isSet: true}
}

func (v NullableUsageBillingModeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageBillingModeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
