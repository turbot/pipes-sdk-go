/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// NotifierState the model 'NotifierState'
type NotifierState string

// List of NotifierState
const (
	NotifierStateEnabled  NotifierState = "enabled"
	NotifierStateDisabled NotifierState = "disabled"
)

// All allowed values of NotifierState enum
var AllowedNotifierStateEnumValues = []NotifierState{
	"enabled",
	"disabled",
}

func (v *NotifierState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotifierState(value)
	for _, existing := range AllowedNotifierStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotifierState", value)
}

// NewNotifierStateFromValue returns a pointer to a valid NotifierState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotifierStateFromValue(v string) (*NotifierState, error) {
	ev := NotifierState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotifierState: valid values are %v", v, AllowedNotifierStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotifierState) IsValid() bool {
	for _, existing := range AllowedNotifierStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotifierState value
func (v NotifierState) Ptr() *NotifierState {
	return &v
}

type NullableNotifierState struct {
	value *NotifierState
	isSet bool
}

func (v NullableNotifierState) Get() *NotifierState {
	return v.value
}

func (v *NullableNotifierState) Set(val *NotifierState) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifierState) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifierState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifierState(val *NotifierState) *NullableNotifierState {
	return &NullableNotifierState{value: val, isSet: true}
}

func (v NullableNotifierState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifierState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
