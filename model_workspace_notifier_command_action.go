/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// WorkspaceNotifierCommandAction the model 'WorkspaceNotifierCommandAction'
type WorkspaceNotifierCommandAction string

// List of WorkspaceNotifierCommandAction
const (
	WorkspaceNotifierCommandSetDefault WorkspaceNotifierCommandAction = "set_default"
)

// All allowed values of WorkspaceNotifierCommandAction enum
var AllowedWorkspaceNotifierCommandActionEnumValues = []WorkspaceNotifierCommandAction{
	"set_default",
}

func (v *WorkspaceNotifierCommandAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkspaceNotifierCommandAction(value)
	for _, existing := range AllowedWorkspaceNotifierCommandActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkspaceNotifierCommandAction", value)
}

// NewWorkspaceNotifierCommandActionFromValue returns a pointer to a valid WorkspaceNotifierCommandAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkspaceNotifierCommandActionFromValue(v string) (*WorkspaceNotifierCommandAction, error) {
	ev := WorkspaceNotifierCommandAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkspaceNotifierCommandAction: valid values are %v", v, AllowedWorkspaceNotifierCommandActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkspaceNotifierCommandAction) IsValid() bool {
	for _, existing := range AllowedWorkspaceNotifierCommandActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkspaceNotifierCommandAction value
func (v WorkspaceNotifierCommandAction) Ptr() *WorkspaceNotifierCommandAction {
	return &v
}

type NullableWorkspaceNotifierCommandAction struct {
	value *WorkspaceNotifierCommandAction
	isSet bool
}

func (v NullableWorkspaceNotifierCommandAction) Get() *WorkspaceNotifierCommandAction {
	return v.value
}

func (v *NullableWorkspaceNotifierCommandAction) Set(val *WorkspaceNotifierCommandAction) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspaceNotifierCommandAction) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspaceNotifierCommandAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspaceNotifierCommandAction(val *WorkspaceNotifierCommandAction) *NullableWorkspaceNotifierCommandAction {
	return &NullableWorkspaceNotifierCommandAction{value: val, isSet: true}
}

func (v NullableWorkspaceNotifierCommandAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspaceNotifierCommandAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
