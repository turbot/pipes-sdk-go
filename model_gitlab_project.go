/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// GitlabProject struct for GitlabProject
type GitlabProject struct {
	Description       *string `json:"description,omitempty"`
	Id                *int32  `json:"id,omitempty"`
	Name              *string `json:"name,omitempty"`
	PathWithNamespace *string `json:"path_with_namespace,omitempty"`
	Visibility        *string `json:"visibility,omitempty"`
}

// NewGitlabProject instantiates a new GitlabProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitlabProject() *GitlabProject {
	this := GitlabProject{}
	return &this
}

// NewGitlabProjectWithDefaults instantiates a new GitlabProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitlabProjectWithDefaults() *GitlabProject {
	this := GitlabProject{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GitlabProject) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabProject) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GitlabProject) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GitlabProject) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GitlabProject) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabProject) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GitlabProject) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GitlabProject) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GitlabProject) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabProject) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GitlabProject) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GitlabProject) SetName(v string) {
	o.Name = &v
}

// GetPathWithNamespace returns the PathWithNamespace field value if set, zero value otherwise.
func (o *GitlabProject) GetPathWithNamespace() string {
	if o == nil || o.PathWithNamespace == nil {
		var ret string
		return ret
	}
	return *o.PathWithNamespace
}

// GetPathWithNamespaceOk returns a tuple with the PathWithNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabProject) GetPathWithNamespaceOk() (*string, bool) {
	if o == nil || o.PathWithNamespace == nil {
		return nil, false
	}
	return o.PathWithNamespace, true
}

// HasPathWithNamespace returns a boolean if a field has been set.
func (o *GitlabProject) HasPathWithNamespace() bool {
	if o != nil && o.PathWithNamespace != nil {
		return true
	}

	return false
}

// SetPathWithNamespace gets a reference to the given string and assigns it to the PathWithNamespace field.
func (o *GitlabProject) SetPathWithNamespace(v string) {
	o.PathWithNamespace = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *GitlabProject) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabProject) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *GitlabProject) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *GitlabProject) SetVisibility(v string) {
	o.Visibility = &v
}

func (o GitlabProject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.PathWithNamespace != nil {
		toSerialize["path_with_namespace"] = o.PathWithNamespace
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	return json.Marshal(toSerialize)
}

type NullableGitlabProject struct {
	value *GitlabProject
	isSet bool
}

func (v NullableGitlabProject) Get() *GitlabProject {
	return v.value
}

func (v *NullableGitlabProject) Set(val *GitlabProject) {
	v.value = val
	v.isSet = true
}

func (v NullableGitlabProject) IsSet() bool {
	return v.isSet
}

func (v *NullableGitlabProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitlabProject(val *GitlabProject) *NullableGitlabProject {
	return &NullableGitlabProject{value: val, isSet: true}
}

func (v NullableGitlabProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitlabProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
