/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// NotificationRecipientState the model 'NotificationRecipientState'
type NotificationRecipientState string

// List of NotificationRecipientState
const (
	RecipientStateActive       NotificationRecipientState = "active"
	RecipientStateError        NotificationRecipientState = "error"
	RecipientStateUnsubscribed NotificationRecipientState = "unsubscribed"
)

// All allowed values of NotificationRecipientState enum
var AllowedNotificationRecipientStateEnumValues = []NotificationRecipientState{
	"active",
	"error",
	"unsubscribed",
}

func (v *NotificationRecipientState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationRecipientState(value)
	for _, existing := range AllowedNotificationRecipientStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationRecipientState", value)
}

// NewNotificationRecipientStateFromValue returns a pointer to a valid NotificationRecipientState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationRecipientStateFromValue(v string) (*NotificationRecipientState, error) {
	ev := NotificationRecipientState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationRecipientState: valid values are %v", v, AllowedNotificationRecipientStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationRecipientState) IsValid() bool {
	for _, existing := range AllowedNotificationRecipientStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificationRecipientState value
func (v NotificationRecipientState) Ptr() *NotificationRecipientState {
	return &v
}

type NullableNotificationRecipientState struct {
	value *NotificationRecipientState
	isSet bool
}

func (v NullableNotificationRecipientState) Get() *NotificationRecipientState {
	return v.value
}

func (v *NullableNotificationRecipientState) Set(val *NotificationRecipientState) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRecipientState) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRecipientState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRecipientState(val *NotificationRecipientState) *NullableNotificationRecipientState {
	return &NullableNotificationRecipientState{value: val, isSet: true}
}

func (v NullableNotificationRecipientState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRecipientState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
