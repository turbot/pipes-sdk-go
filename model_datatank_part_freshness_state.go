/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// DatatankPartFreshnessState the model 'DatatankPartFreshnessState'
type DatatankPartFreshnessState string

// List of DatatankPartFreshnessState
const (
	DatatankPartFreshnessStateFresh    DatatankPartFreshnessState = "fresh"
	DatatankPartFreshnessStateStale    DatatankPartFreshnessState = "stale"
	DatatankPartFreshnessStateExpired  DatatankPartFreshnessState = "expired"
	DatatankPartFreshnessStateError    DatatankPartFreshnessState = "error"
	DatatankPartFreshnessStatePending  DatatankPartFreshnessState = "pending"
	DatatankPartFreshnessStateRemoving DatatankPartFreshnessState = "removing"
	DatatankPartFreshnessStateDisabled DatatankPartFreshnessState = "disabled"
)

// All allowed values of DatatankPartFreshnessState enum
var AllowedDatatankPartFreshnessStateEnumValues = []DatatankPartFreshnessState{
	"fresh",
	"stale",
	"expired",
	"error",
	"pending",
	"removing",
	"disabled",
}

func (v *DatatankPartFreshnessState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatatankPartFreshnessState(value)
	for _, existing := range AllowedDatatankPartFreshnessStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatatankPartFreshnessState", value)
}

// NewDatatankPartFreshnessStateFromValue returns a pointer to a valid DatatankPartFreshnessState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatatankPartFreshnessStateFromValue(v string) (*DatatankPartFreshnessState, error) {
	ev := DatatankPartFreshnessState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatatankPartFreshnessState: valid values are %v", v, AllowedDatatankPartFreshnessStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatatankPartFreshnessState) IsValid() bool {
	for _, existing := range AllowedDatatankPartFreshnessStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatatankPartFreshnessState value
func (v DatatankPartFreshnessState) Ptr() *DatatankPartFreshnessState {
	return &v
}

type NullableDatatankPartFreshnessState struct {
	value *DatatankPartFreshnessState
	isSet bool
}

func (v NullableDatatankPartFreshnessState) Get() *DatatankPartFreshnessState {
	return v.value
}

func (v *NullableDatatankPartFreshnessState) Set(val *DatatankPartFreshnessState) {
	v.value = val
	v.isSet = true
}

func (v NullableDatatankPartFreshnessState) IsSet() bool {
	return v.isSet
}

func (v *NullableDatatankPartFreshnessState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatatankPartFreshnessState(val *DatatankPartFreshnessState) *NullableDatatankPartFreshnessState {
	return &NullableDatatankPartFreshnessState{value: val, isSet: true}
}

func (v NullableDatatankPartFreshnessState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatatankPartFreshnessState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
