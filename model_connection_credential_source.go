/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// ConnectionCredentialSource the model 'ConnectionCredentialSource'
type ConnectionCredentialSource string

// List of ConnectionCredentialSource
const (
	ConnectionCredentialSourceSelf      ConnectionCredentialSource = "self"
	ConnectionCredentialSourceInherited ConnectionCredentialSource = "inherited"
	ConnectionCredentialSourceTemporary ConnectionCredentialSource = "temporary"
)

// All allowed values of ConnectionCredentialSource enum
var AllowedConnectionCredentialSourceEnumValues = []ConnectionCredentialSource{
	"self",
	"inherited",
	"temporary",
}

func (v *ConnectionCredentialSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionCredentialSource(value)
	for _, existing := range AllowedConnectionCredentialSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionCredentialSource", value)
}

// NewConnectionCredentialSourceFromValue returns a pointer to a valid ConnectionCredentialSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionCredentialSourceFromValue(v string) (*ConnectionCredentialSource, error) {
	ev := ConnectionCredentialSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionCredentialSource: valid values are %v", v, AllowedConnectionCredentialSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionCredentialSource) IsValid() bool {
	for _, existing := range AllowedConnectionCredentialSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionCredentialSource value
func (v ConnectionCredentialSource) Ptr() *ConnectionCredentialSource {
	return &v
}

type NullableConnectionCredentialSource struct {
	value *ConnectionCredentialSource
	isSet bool
}

func (v NullableConnectionCredentialSource) Get() *ConnectionCredentialSource {
	return v.value
}

func (v *NullableConnectionCredentialSource) Set(val *ConnectionCredentialSource) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionCredentialSource) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionCredentialSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionCredentialSource(val *ConnectionCredentialSource) *NullableConnectionCredentialSource {
	return &NullableConnectionCredentialSource{value: val, isSet: true}
}

func (v NullableConnectionCredentialSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionCredentialSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
