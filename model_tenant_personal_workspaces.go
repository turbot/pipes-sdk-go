/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// TenantPersonalWorkspaces the model 'TenantPersonalWorkspaces'
type TenantPersonalWorkspaces string

// List of TenantPersonalWorkspaces
const (
	TenantPersonalWorkspacesEnabled  TenantPersonalWorkspaces = "enabled"
	TenantPersonalWorkspacesDisabled TenantPersonalWorkspaces = "disabled"
)

// All allowed values of TenantPersonalWorkspaces enum
var AllowedTenantPersonalWorkspacesEnumValues = []TenantPersonalWorkspaces{
	"enabled",
	"disabled",
}

func (v *TenantPersonalWorkspaces) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TenantPersonalWorkspaces(value)
	for _, existing := range AllowedTenantPersonalWorkspacesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TenantPersonalWorkspaces", value)
}

// NewTenantPersonalWorkspacesFromValue returns a pointer to a valid TenantPersonalWorkspaces
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTenantPersonalWorkspacesFromValue(v string) (*TenantPersonalWorkspaces, error) {
	ev := TenantPersonalWorkspaces(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TenantPersonalWorkspaces: valid values are %v", v, AllowedTenantPersonalWorkspacesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TenantPersonalWorkspaces) IsValid() bool {
	for _, existing := range AllowedTenantPersonalWorkspacesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TenantPersonalWorkspaces value
func (v TenantPersonalWorkspaces) Ptr() *TenantPersonalWorkspaces {
	return &v
}

type NullableTenantPersonalWorkspaces struct {
	value *TenantPersonalWorkspaces
	isSet bool
}

func (v NullableTenantPersonalWorkspaces) Get() *TenantPersonalWorkspaces {
	return v.value
}

func (v *NullableTenantPersonalWorkspaces) Set(val *TenantPersonalWorkspaces) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantPersonalWorkspaces) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantPersonalWorkspaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantPersonalWorkspaces(val *TenantPersonalWorkspaces) *NullableTenantPersonalWorkspaces {
	return &NullableTenantPersonalWorkspaces{value: val, isSet: true}
}

func (v NullableTenantPersonalWorkspaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantPersonalWorkspaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
