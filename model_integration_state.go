/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// IntegrationState the model 'IntegrationState'
type IntegrationState string

// List of IntegrationState
const (
	IntegrationStatePending  IntegrationState = "pending"
	IntegrationStateEnabled  IntegrationState = "enabled"
	IntegrationStateDisabled IntegrationState = "disabled"
	IntegrationStateError    IntegrationState = "error"
)

// All allowed values of IntegrationState enum
var AllowedIntegrationStateEnumValues = []IntegrationState{
	"pending",
	"enabled",
	"disabled",
	"error",
}

func (v *IntegrationState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntegrationState(value)
	for _, existing := range AllowedIntegrationStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntegrationState", value)
}

// NewIntegrationStateFromValue returns a pointer to a valid IntegrationState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntegrationStateFromValue(v string) (*IntegrationState, error) {
	ev := IntegrationState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntegrationState: valid values are %v", v, AllowedIntegrationStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntegrationState) IsValid() bool {
	for _, existing := range AllowedIntegrationStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntegrationState value
func (v IntegrationState) Ptr() *IntegrationState {
	return &v
}

type NullableIntegrationState struct {
	value *IntegrationState
	isSet bool
}

func (v NullableIntegrationState) Get() *IntegrationState {
	return v.value
}

func (v *NullableIntegrationState) Set(val *IntegrationState) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationState) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationState(val *IntegrationState) *NullableIntegrationState {
	return &NullableIntegrationState{value: val, isSet: true}
}

func (v NullableIntegrationState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
