/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// WorkspaceCommandAction the model 'WorkspaceCommandAction'
type WorkspaceCommandAction string

// List of WorkspaceCommandAction
const (
	WorkspaceCommandReboot  WorkspaceCommandAction = "reboot"
	WorkspaceCommandStop    WorkspaceCommandAction = "stop"
	WorkspaceCommandStart   WorkspaceCommandAction = "start"
	WorkspaceCommandUpgrade WorkspaceCommandAction = "upgrade"
)

// All allowed values of WorkspaceCommandAction enum
var AllowedWorkspaceCommandActionEnumValues = []WorkspaceCommandAction{
	"reboot",
	"stop",
	"start",
	"upgrade",
}

func (v *WorkspaceCommandAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkspaceCommandAction(value)
	for _, existing := range AllowedWorkspaceCommandActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkspaceCommandAction", value)
}

// NewWorkspaceCommandActionFromValue returns a pointer to a valid WorkspaceCommandAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkspaceCommandActionFromValue(v string) (*WorkspaceCommandAction, error) {
	ev := WorkspaceCommandAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkspaceCommandAction: valid values are %v", v, AllowedWorkspaceCommandActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkspaceCommandAction) IsValid() bool {
	for _, existing := range AllowedWorkspaceCommandActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkspaceCommandAction value
func (v WorkspaceCommandAction) Ptr() *WorkspaceCommandAction {
	return &v
}

type NullableWorkspaceCommandAction struct {
	value *WorkspaceCommandAction
	isSet bool
}

func (v NullableWorkspaceCommandAction) Get() *WorkspaceCommandAction {
	return v.value
}

func (v *NullableWorkspaceCommandAction) Set(val *WorkspaceCommandAction) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspaceCommandAction) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspaceCommandAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspaceCommandAction(val *WorkspaceCommandAction) *NullableWorkspaceCommandAction {
	return &NullableWorkspaceCommandAction{value: val, isSet: true}
}

func (v NullableWorkspaceCommandAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspaceCommandAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
