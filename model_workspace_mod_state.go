/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// WorkspaceModState the model 'WorkspaceModState'
type WorkspaceModState string

// List of WorkspaceModState
const (
	WorkspaceModInstalling WorkspaceModState = "installing"
	WorkspaceModInstalled  WorkspaceModState = "installed"
	WorkspaceModError      WorkspaceModState = "error"
	WorkspaceModDeleting   WorkspaceModState = "deleting"
)

// All allowed values of WorkspaceModState enum
var AllowedWorkspaceModStateEnumValues = []WorkspaceModState{
	"installing",
	"installed",
	"error",
	"deleting",
}

func (v *WorkspaceModState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkspaceModState(value)
	for _, existing := range AllowedWorkspaceModStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkspaceModState", value)
}

// NewWorkspaceModStateFromValue returns a pointer to a valid WorkspaceModState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkspaceModStateFromValue(v string) (*WorkspaceModState, error) {
	ev := WorkspaceModState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkspaceModState: valid values are %v", v, AllowedWorkspaceModStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkspaceModState) IsValid() bool {
	for _, existing := range AllowedWorkspaceModStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkspaceModState value
func (v WorkspaceModState) Ptr() *WorkspaceModState {
	return &v
}

type NullableWorkspaceModState struct {
	value *WorkspaceModState
	isSet bool
}

func (v NullableWorkspaceModState) Get() *WorkspaceModState {
	return v.value
}

func (v *NullableWorkspaceModState) Set(val *WorkspaceModState) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspaceModState) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspaceModState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspaceModState(val *WorkspaceModState) *NullableWorkspaceModState {
	return &NullableWorkspaceModState{value: val, isSet: true}
}

func (v NullableWorkspaceModState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspaceModState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
