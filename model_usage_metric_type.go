/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// UsageMetricType the model 'UsageMetricType'
type UsageMetricType string

// List of UsageMetricType
const (
	UsageMetricTypeUserCount            UsageMetricType = "user_count"
	UsageMetricTypeDbExecutionMs        UsageMetricType = "db_execution_ms"
	UsageMetricTypeDbVolumeBytes        UsageMetricType = "db_volume_bytes"
	UsageMetricTypeDbVolumeUsedBytes    UsageMetricType = "db_volume_used_bytes"
	UsageMetricTypeProcessExecutionMs   UsageMetricType = "process_execution_ms"
	UsageMetricTypeProcessLogBytes      UsageMetricType = "process_log_bytes"
	UsageMetricTypeSnapshotStorageBytes UsageMetricType = "snapshot_storage_bytes"
)

// All allowed values of UsageMetricType enum
var AllowedUsageMetricTypeEnumValues = []UsageMetricType{
	"user_count",
	"db_execution_ms",
	"db_volume_bytes",
	"db_volume_used_bytes",
	"process_execution_ms",
	"process_log_bytes",
	"snapshot_storage_bytes",
}

func (v *UsageMetricType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UsageMetricType(value)
	for _, existing := range AllowedUsageMetricTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UsageMetricType", value)
}

// NewUsageMetricTypeFromValue returns a pointer to a valid UsageMetricType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUsageMetricTypeFromValue(v string) (*UsageMetricType, error) {
	ev := UsageMetricType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UsageMetricType: valid values are %v", v, AllowedUsageMetricTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UsageMetricType) IsValid() bool {
	for _, existing := range AllowedUsageMetricTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UsageMetricType value
func (v UsageMetricType) Ptr() *UsageMetricType {
	return &v
}

type NullableUsageMetricType struct {
	value *UsageMetricType
	isSet bool
}

func (v NullableUsageMetricType) Get() *UsageMetricType {
	return v.value
}

func (v *NullableUsageMetricType) Set(val *UsageMetricType) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageMetricType) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageMetricType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageMetricType(val *UsageMetricType) *NullableUsageMetricType {
	return &NullableUsageMetricType{value: val, isSet: true}
}

func (v NullableUsageMetricType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageMetricType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
