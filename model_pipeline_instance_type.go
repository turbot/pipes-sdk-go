/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// PipelineInstanceType the model 'PipelineInstanceType'
type PipelineInstanceType string

// List of PipelineInstanceType
const (
	PipelineInstanceTypeC1Shared PipelineInstanceType = "c1.shared"
	PipelineInstanceTypeC1Small  PipelineInstanceType = "c1.small"
)

// All allowed values of PipelineInstanceType enum
var AllowedPipelineInstanceTypeEnumValues = []PipelineInstanceType{
	"c1.shared",
	"c1.small",
}

func (v *PipelineInstanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PipelineInstanceType(value)
	for _, existing := range AllowedPipelineInstanceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PipelineInstanceType", value)
}

// NewPipelineInstanceTypeFromValue returns a pointer to a valid PipelineInstanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPipelineInstanceTypeFromValue(v string) (*PipelineInstanceType, error) {
	ev := PipelineInstanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PipelineInstanceType: valid values are %v", v, AllowedPipelineInstanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PipelineInstanceType) IsValid() bool {
	for _, existing := range AllowedPipelineInstanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PipelineInstanceType value
func (v PipelineInstanceType) Ptr() *PipelineInstanceType {
	return &v
}

type NullablePipelineInstanceType struct {
	value *PipelineInstanceType
	isSet bool
}

func (v NullablePipelineInstanceType) Get() *PipelineInstanceType {
	return v.value
}

func (v *NullablePipelineInstanceType) Set(val *PipelineInstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineInstanceType(val *PipelineInstanceType) *NullablePipelineInstanceType {
	return &NullablePipelineInstanceType{value: val, isSet: true}
}

func (v NullablePipelineInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
