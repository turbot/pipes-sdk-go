/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// UsageDimensionType the model 'UsageDimensionType'
type UsageDimensionType string

// List of UsageDimensionType
const (
	UsageDimensionTypeCompute UsageDimensionType = "compute"
	UsageDimensionTypeStorage UsageDimensionType = "storage"
	UsageDimensionTypeUser    UsageDimensionType = "user"
)

// All allowed values of UsageDimensionType enum
var AllowedUsageDimensionTypeEnumValues = []UsageDimensionType{
	"compute",
	"storage",
	"user",
}

func (v *UsageDimensionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UsageDimensionType(value)
	for _, existing := range AllowedUsageDimensionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UsageDimensionType", value)
}

// NewUsageDimensionTypeFromValue returns a pointer to a valid UsageDimensionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUsageDimensionTypeFromValue(v string) (*UsageDimensionType, error) {
	ev := UsageDimensionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UsageDimensionType: valid values are %v", v, AllowedUsageDimensionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UsageDimensionType) IsValid() bool {
	for _, existing := range AllowedUsageDimensionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UsageDimensionType value
func (v UsageDimensionType) Ptr() *UsageDimensionType {
	return &v
}

type NullableUsageDimensionType struct {
	value *UsageDimensionType
	isSet bool
}

func (v NullableUsageDimensionType) Get() *UsageDimensionType {
	return v.value
}

func (v *NullableUsageDimensionType) Set(val *UsageDimensionType) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageDimensionType) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageDimensionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageDimensionType(val *UsageDimensionType) *NullableUsageDimensionType {
	return &NullableUsageDimensionType{value: val, isSet: true}
}

func (v NullableUsageDimensionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageDimensionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
