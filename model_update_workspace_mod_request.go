/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
)

// UpdateWorkspaceModRequest struct for UpdateWorkspaceModRequest
type UpdateWorkspaceModRequest struct {
	Branch     *string `json:"branch,omitempty"`
	Constraint *string `json:"constraint,omitempty"`
	Version    *string `json:"version,omitempty"`
}

// NewUpdateWorkspaceModRequest instantiates a new UpdateWorkspaceModRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWorkspaceModRequest() *UpdateWorkspaceModRequest {
	this := UpdateWorkspaceModRequest{}
	return &this
}

// NewUpdateWorkspaceModRequestWithDefaults instantiates a new UpdateWorkspaceModRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWorkspaceModRequestWithDefaults() *UpdateWorkspaceModRequest {
	this := UpdateWorkspaceModRequest{}
	return &this
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *UpdateWorkspaceModRequest) GetBranch() string {
	if o == nil || o.Branch == nil {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWorkspaceModRequest) GetBranchOk() (*string, bool) {
	if o == nil || o.Branch == nil {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *UpdateWorkspaceModRequest) HasBranch() bool {
	if o != nil && o.Branch != nil {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *UpdateWorkspaceModRequest) SetBranch(v string) {
	o.Branch = &v
}

// GetConstraint returns the Constraint field value if set, zero value otherwise.
func (o *UpdateWorkspaceModRequest) GetConstraint() string {
	if o == nil || o.Constraint == nil {
		var ret string
		return ret
	}
	return *o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWorkspaceModRequest) GetConstraintOk() (*string, bool) {
	if o == nil || o.Constraint == nil {
		return nil, false
	}
	return o.Constraint, true
}

// HasConstraint returns a boolean if a field has been set.
func (o *UpdateWorkspaceModRequest) HasConstraint() bool {
	if o != nil && o.Constraint != nil {
		return true
	}

	return false
}

// SetConstraint gets a reference to the given string and assigns it to the Constraint field.
func (o *UpdateWorkspaceModRequest) SetConstraint(v string) {
	o.Constraint = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UpdateWorkspaceModRequest) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWorkspaceModRequest) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UpdateWorkspaceModRequest) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *UpdateWorkspaceModRequest) SetVersion(v string) {
	o.Version = &v
}

func (o UpdateWorkspaceModRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Branch != nil {
		toSerialize["branch"] = o.Branch
	}
	if o.Constraint != nil {
		toSerialize["constraint"] = o.Constraint
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateWorkspaceModRequest struct {
	value *UpdateWorkspaceModRequest
	isSet bool
}

func (v NullableUpdateWorkspaceModRequest) Get() *UpdateWorkspaceModRequest {
	return v.value
}

func (v *NullableUpdateWorkspaceModRequest) Set(val *UpdateWorkspaceModRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWorkspaceModRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWorkspaceModRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWorkspaceModRequest(val *UpdateWorkspaceModRequest) *NullableUpdateWorkspaceModRequest {
	return &NullableUpdateWorkspaceModRequest{value: val, isSet: true}
}

func (v NullableUpdateWorkspaceModRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWorkspaceModRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
