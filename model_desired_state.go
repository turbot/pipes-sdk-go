/*
Turbot Pipes

Turbot Pipes is an intelligence, automation & security platform built specifically for DevOps.

API version: {{OPEN_API_VERSION}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipes

import (
	"encoding/json"
	"fmt"
)

// DesiredState the model 'DesiredState'
type DesiredState string

// List of DesiredState
const (
	DesiredStateEnabled  DesiredState = "enabled"
	DesiredStateDisabled DesiredState = "disabled"
	DesiredStatePaused   DesiredState = "paused"
)

// All allowed values of DesiredState enum
var AllowedDesiredStateEnumValues = []DesiredState{
	"enabled",
	"disabled",
	"paused",
}

func (v *DesiredState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DesiredState(value)
	for _, existing := range AllowedDesiredStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DesiredState", value)
}

// NewDesiredStateFromValue returns a pointer to a valid DesiredState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDesiredStateFromValue(v string) (*DesiredState, error) {
	ev := DesiredState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DesiredState: valid values are %v", v, AllowedDesiredStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DesiredState) IsValid() bool {
	for _, existing := range AllowedDesiredStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DesiredState value
func (v DesiredState) Ptr() *DesiredState {
	return &v
}

type NullableDesiredState struct {
	value *DesiredState
	isSet bool
}

func (v NullableDesiredState) Get() *DesiredState {
	return v.value
}

func (v *NullableDesiredState) Set(val *DesiredState) {
	v.value = val
	v.isSet = true
}

func (v NullableDesiredState) IsSet() bool {
	return v.isSet
}

func (v *NullableDesiredState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesiredState(val *DesiredState) *NullableDesiredState {
	return &NullableDesiredState{value: val, isSet: true}
}

func (v NullableDesiredState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesiredState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
